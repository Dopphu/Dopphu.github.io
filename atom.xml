<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome to Dopphu&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dopphu.github.io/"/>
  <updated>2020-08-06T09:20:22.795Z</updated>
  <id>https://dopphu.github.io/</id>
  
  <author>
    <name>Dopphu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cplusplus析构函数</title>
    <link href="https://dopphu.github.io/2020/08/06/Cplusplus%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
    <id>https://dopphu.github.io/2020/08/06/Cplusplus%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/</id>
    <published>2020-08-06T09:19:58.000Z</published>
    <updated>2020-08-06T09:20:22.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h1><p><strong>$</strong> 析构函数与构造函数的作用几乎正好相反，它是用来完成对象被删除前的一些清理工作。<strong>析构函数是在对象的生存周期即将结束的时刻被自动调用的。</strong>它的调用完成之后对象也就消失了，相应的内存空间也会被释放。</p><p><img src="https://wx1.sbimg.cn/2020/08/05/oCOg6.png" alt="oCOg6.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Clock();<span class="comment">//构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTime</span><span class="params">(<span class="keyword">int</span> newH, <span class="keyword">int</span> newM, <span class="keyword">int</span> newS)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showTime</span><span class="params">()</span></span>;</span><br><span class="line">~Clock&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> hour, minute, second; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;析构函数&quot;&gt;&lt;a href=&quot;#析构函数&quot; class=&quot;headerlink&quot; title=&quot;析构函数&quot;&gt;&lt;/a&gt;析构函数&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;$&lt;/strong&gt; 析构函数与构造函数的作用几乎正好相反，它是用来完成对象被删除前的一些清理工作。&lt;str
      
    
    </summary>
    
    
      <category term="C++" scheme="https://dopphu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://dopphu.github.io/tags/C/"/>
    
      <category term="C++对象" scheme="https://dopphu.github.io/tags/C-%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Cplusplus位域</title>
    <link href="https://dopphu.github.io/2020/08/06/Cplusplus%E4%BD%8D%E5%9F%9F/"/>
    <id>https://dopphu.github.io/2020/08/06/Cplusplus%E4%BD%8D%E5%9F%9F/</id>
    <published>2020-08-06T09:19:13.000Z</published>
    <updated>2020-08-06T09:19:40.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="位域"><a href="#位域" class="headerlink" title="位域"></a>位域</h1><p><img src="https://wx1.sbimg.cn/2020/08/06/o6NMl.png" alt="o6NMl.png"></p><p>课本截图，感jio说的很详细了。</p><p><strong>$</strong> 用个例子感受一下。</p><p>例子：设计一个结构体存储学生的成绩信息，需要包栝学号，年级和成绩3项内容，学号的范围是0-99 999 999，年级分为：freshman，sophomore，junior，senior四种，成绩包栝A，B，C，D四个等级。</p><p>分析：</p><ol><li><p>不使用位域：</p><p>学号用整型4个字节，分别用枚举储存年级和等级（各至少占一个字节）。则共计：6字节</p></li><li><p>使用位域：</p><p>学号要27个二进制位（2<sup>27</sup> = 134 217 728)的有效信息，而年级、成绩各需要两位二进制数就可以了。则共计：4个字节（即可存下）</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Level &#123;</span><br><span class="line">PRESHMAN, SOPHOMORE, JUNOR, SENIOR</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">enum</span> Grade &#123;</span><br><span class="line">A, B, C, D</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student(<span class="keyword">unsigned</span> <span class="keyword">int</span> number, Level level, Grade grade)</span><br><span class="line">:number(number), level(level), grade(grade) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">unsigned</span> number: <span class="number">27</span>;</span><br><span class="line">Level level : <span class="number">2</span>;</span><br><span class="line">Grade grade : <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::show</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Number:"</span>&lt;&lt;number&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Level:    "</span>;</span><br><span class="line"><span class="keyword">switch</span>(level)&#123;</span><br><span class="line"><span class="keyword">case</span> PRESHMAN:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"freshman"</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SOPHOMORE:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"sophomore"</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> JUNOR:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"junior"</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SENIOR:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"senior"</span>;<span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Grade:    "</span>;</span><br><span class="line"><span class="keyword">switch</span>(grade)&#123;</span><br><span class="line"><span class="keyword">case</span> A:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"A"</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> B:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"B"</span>;<span class="keyword">break</span>; </span><br><span class="line"><span class="keyword">case</span> C:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"C"</span>;<span class="keyword">break</span>; </span><br><span class="line"><span class="keyword">case</span> D:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"D"</span>;<span class="keyword">break</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">Student <span class="title">s</span><span class="params">(<span class="number">123564</span>, SOPHOMORE, C)</span></span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Size of Student:"</span>&lt;&lt;<span class="keyword">sizeof</span>(Student)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">s.show();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://wx2.sbimg.cn/2020/08/06/o6FCd.png" alt="o6FCd.png"></p><p>不同编译器第一行的结果可能不同。</p><p><strong>$</strong> 再放一张课本截图吧。</p><p><img src="https://wx1.sbimg.cn/2020/08/06/o6ylU.png" alt="o6ylU.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;位域&quot;&gt;&lt;a href=&quot;#位域&quot; class=&quot;headerlink&quot; title=&quot;位域&quot;&gt;&lt;/a&gt;位域&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://wx1.sbimg.cn/2020/08/06/o6NMl.png&quot; alt=&quot;o6NMl.png&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="C++" scheme="https://dopphu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://dopphu.github.io/tags/C/"/>
    
      <category term="C++对象" scheme="https://dopphu.github.io/tags/C-%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Cplusplus前向声明</title>
    <link href="https://dopphu.github.io/2020/08/06/Cplusplus%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E/"/>
    <id>https://dopphu.github.io/2020/08/06/Cplusplus%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E/</id>
    <published>2020-08-06T09:17:43.000Z</published>
    <updated>2020-08-06T09:18:46.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前向引用声明"><a href="#前向引用声明" class="headerlink" title="前向引用声明"></a>前向引用声明</h1><p><strong>$</strong> 我们知道，C++的类应当先定义再使用。但是处理复杂问题，考虑类的组合时，很可能遇到两个类相互引用的情况，这种情况也成称为循环依赖。例如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(B b)</span></span>;<span class="comment">//以B类对象b作为形参的成员函数</span></span><br><span class="line">    <span class="comment">//这里将引起编译错误，因为“B”为未知符号</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">(A a)</span></span>;<span class="comment">//以A类对象为形参的成员函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于在使用一个类前，必须先定义该类，因此无论将哪一种类的定义放在前面，都会引起编译错误。加上如下的<strong>前向引用声明</strong>，问题就解决了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span><span class="comment">//前向引用声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(B b)</span></span>;<span class="comment">//以B类对象b作为形参的成员函数</span></span><br><span class="line">    <span class="comment">//这里将引起编译错误，因为“B”为未知符号</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">(A a)</span></span>;<span class="comment">//以A类对象为形参的成员函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>$</strong> 使用前向引用说明虽然可以解决一些问题，但它并不是万能的。需要注意的是，尽管使用了向前引用声明，<strong>但是在提供一个完整的类定义之前，不能定义该类的对象，也不能在内联成员函数中使用该类的对象。</strong>请看下面的程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fred</span>;</span><span class="comment">//前向引用说明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Barney</span>&#123;</span></span><br><span class="line">    Fred x;<span class="comment">//错误：类Fred的定义尚不完善</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fred</span>&#123;</span></span><br><span class="line">  Barney y;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于这段程序，编译器将指出错误。原因是<strong>对类名Fred的前向引用只能说明Fred是个类名，而不能给出该类的完整定义，因此在类Barney中就不能定义类Fred的数据成员。</strong>因此使两个类以彼此的对象为数据成员，是不合法的。</p><p><strong>$</strong> 再看一幅图（直接截图课本）</p><p><img src="https://wx2.sbimg.cn/2020/08/06/ooIOU.png" alt="ooIOU.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前向引用声明&quot;&gt;&lt;a href=&quot;#前向引用声明&quot; class=&quot;headerlink&quot; title=&quot;前向引用声明&quot;&gt;&lt;/a&gt;前向引用声明&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;$&lt;/strong&gt; 我们知道，C++的类应当先定义再使用。但是处理复杂问题，考虑类的组合时
      
    
    </summary>
    
    
      <category term="C++" scheme="https://dopphu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://dopphu.github.io/tags/C/"/>
    
      <category term="C++对象" scheme="https://dopphu.github.io/tags/C-%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Cplusplus结构体和联合体</title>
    <link href="https://dopphu.github.io/2020/08/06/Cplusplus%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E8%81%94%E5%90%88%E4%BD%93/"/>
    <id>https://dopphu.github.io/2020/08/06/Cplusplus%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E8%81%94%E5%90%88%E4%BD%93/</id>
    <published>2020-08-06T09:14:13.000Z</published>
    <updated>2020-08-06T09:15:28.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-结构体和联合体"><a href="#C-结构体和联合体" class="headerlink" title="C++结构体和联合体"></a>C++结构体和联合体</h1><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p><img src="https://s1.ax1x.com/2020/08/06/acK6G8.png" alt="acK6G8.png"></p><p><img src="https://s1.ax1x.com/2020/08/06/acMksH.png" alt="acMksH.png"></p><p>这是关于结构体教材的截图（我觉得已经解决我大部分的疑惑了）。我对于结构体的想法是就当C语言的结构体使用就可以了，需要更复杂的数据结构就用C++的对象就好啦。</p><h2 id="联合体"><a href="#联合体" class="headerlink" title="联合体"></a>联合体</h2><p><strong>$</strong> 由于联合体的成员<strong>共用相同的内存单元</strong>，联合体变量中成员同时至多只有一个是有意义的。另外，不同数据单元共用相同内存单元的特性，联合体有下面一些限制。</p><ol><li>联合体的各个对象成员，不能有自定义的构造函数、自定义的析构函数和重载的赋值运算符，不仅联合体的对象成员不能有这些函数，这些对象的对象成员也不能有，以此类推。</li><li>联合体不能继承，因而也不支持包含多态。</li></ol><p><strong>$</strong> 联合体也可以不声明名称，称为无名联合体。无名联合体没有标记名，只是声明一个成员项的集合，这些成员具有相同的内存地址，可以由成员项的名字直接访问。</p><p>例如，声明无名联合体如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">float</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在程序中可以这样使用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">10</span>;</span><br><span class="line">f = <span class="number">2.2</span>;</span><br></pre></td></tr></table></figure><p><strong>$</strong> 无名联合体通常用作类或结构体的内嵌成员，下面一个例子辅助理解。</p><p>先插一个枚举类型变量的语法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">enum</span> &#123;</span><br><span class="line">GRADE, PASS, PERFECT</span><br><span class="line">&#125;mode;</span><br><span class="line">mode = GRADE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //mode = 1; 如果用这个语句的话会报错，我想mode就是一个只能被GRADE、PASS等赋值的变量 </span></span><br><span class="line"><span class="comment">    报错内容：</span></span><br><span class="line"><span class="comment">    [Error] invalid conversion from 'int' to 'main()::&lt;anonymous enum&gt;' [-fpermissive]</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">i = PASS;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"mode:"</span>&lt;&lt;mode&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"i:"</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正片开始</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExamInfo</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">ExamInfo(<span class="built_in">string</span> name, <span class="keyword">char</span> grade):name(name), mode(GRADE), grade(grade)&#123;&#125;</span><br><span class="line">ExamInfo(<span class="built_in">string</span> name, <span class="keyword">bool</span> pass):name(name), mode(PASS), pass(pass)&#123;&#125;</span><br><span class="line">ExamInfo(<span class="built_in">string</span> name, <span class="keyword">int</span> percent):name(name), mode(PERCENTAGE), percent(percent)&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> name;<span class="comment">//课程名称</span></span><br><span class="line"><span class="keyword">enum</span> &#123;</span><br><span class="line">GRADE, PASS, PERCENTAGE</span><br><span class="line">&#125;mode;<span class="comment">//采用何种计分方式</span></span><br><span class="line"><span class="keyword">union</span>&#123;</span><br><span class="line"><span class="keyword">char</span> grade;<span class="comment">//等级制</span></span><br><span class="line"><span class="keyword">bool</span> pass;<span class="comment">//是否通过 pass or fail</span></span><br><span class="line"><span class="keyword">int</span> percent;<span class="comment">//百分制的成绩</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExamInfo::show</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">":"</span>;</span><br><span class="line"><span class="keyword">switch</span>(mode)&#123;</span><br><span class="line"><span class="keyword">case</span> GRADE:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;grade;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PASS:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(pass?<span class="string">"PASS"</span>:<span class="string">"FAIL"</span>);<span class="comment">//这个括号()很关键，我在这栽了。可能是结合性的问题</span></span><br><span class="line">      <span class="comment">//cout&lt;&lt;pass?"PASS":"FAIL";这样写的话会直接打印出1.我试着把true改为false，结果变成了0。</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PERCENTAGE:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;percent;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">ExamInfo <span class="title">course1</span><span class="params">(<span class="string">"Math"</span>, <span class="string">'A'</span>)</span></span>;</span><br><span class="line"><span class="function">ExamInfo <span class="title">course2</span><span class="params">(<span class="string">"P.E"</span>, <span class="literal">true</span>)</span></span>;</span><br><span class="line"><span class="function">ExamInfo <span class="title">course3</span><span class="params">(<span class="string">"English"</span>, <span class="number">113</span>)</span></span>;</span><br><span class="line">    <span class="comment">//我忘了百分制（113&gt;100），但是不影响理解程序，不好意思。</span></span><br><span class="line"></span><br><span class="line">course1.show();</span><br><span class="line">course2.show();</span><br><span class="line">course3.show();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序执行结果：</p><p><img src="https://wx2.sbimg.cn/2020/08/06/o6zin.png" alt="o6zin.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-结构体和联合体&quot;&gt;&lt;a href=&quot;#C-结构体和联合体&quot; class=&quot;headerlink&quot; title=&quot;C++结构体和联合体&quot;&gt;&lt;/a&gt;C++结构体和联合体&lt;/h1&gt;&lt;h2 id=&quot;结构体&quot;&gt;&lt;a href=&quot;#结构体&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="C++" scheme="https://dopphu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://dopphu.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>关于图床</title>
    <link href="https://dopphu.github.io/2020/08/06/%E5%85%B3%E4%BA%8E%E5%9B%BE%E5%BA%8A/"/>
    <id>https://dopphu.github.io/2020/08/06/%E5%85%B3%E4%BA%8E%E5%9B%BE%E5%BA%8A/</id>
    <published>2020-08-06T08:39:40.771Z</published>
    <updated>2020-08-06T08:42:51.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于图床"><a href="#关于图床" class="headerlink" title="关于图床"></a>关于图床</h1><p>免费的：（免费的弊端就是不稳定，生杀大权握在别人手中）</p><p>公益图床：<a href="https://sbimg.cn" target="_blank" rel="noopener">https://sbimg.cn</a> （这个url引用的速度个人感觉比路过图床快一些）</p><p>路过图床：<a href="https://imgchr.com/" target="_blank" rel="noopener">https://imgchr.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于图床&quot;&gt;&lt;a href=&quot;#关于图床&quot; class=&quot;headerlink&quot; title=&quot;关于图床&quot;&gt;&lt;/a&gt;关于图床&lt;/h1&gt;&lt;p&gt;免费的：（免费的弊端就是不稳定，生杀大权握在别人手中）&lt;/p&gt;
&lt;p&gt;公益图床：&lt;a href=&quot;https://sbimg
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C++复制构造函数</title>
    <link href="https://dopphu.github.io/2020/08/05/Cplusplus%E5%A4%8D%E5%88%B6%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>https://dopphu.github.io/2020/08/05/Cplusplus%E5%A4%8D%E5%88%B6%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</id>
    <published>2020-08-05T01:14:09.000Z</published>
    <updated>2020-08-05T01:43:51.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数"></a>复制构造函数</h1><p>$ <strong>复制构造函数</strong>是一种特殊的构造函数，具有一般构造函数的所有特性，<strong>其形参是本类的对象的引用。其作用是使用一个已经存在的对象（由复制构造函数的参数指定），去初始化同类的一个新对象。</strong></p><p>$ <strong>隐含的复制构造函数</strong>：如果程序员没有定义类的复制构造函数，系统就会在必要时自动生成一个隐含的复制构造函数。<strong>这个隐含的构造函数会把初始值对象的每个数据成员的值都复制到新建立的对象中。</strong>（即完全拥有相同的属性。）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Point(<span class="keyword">int</span> xx=<span class="number">0</span>, <span class="keyword">int</span> yy=<span class="number">0</span>)&#123;</span><br><span class="line">x = xx;</span><br><span class="line">y = yy;</span><br><span class="line">&#125;</span><br><span class="line">Point(Point &amp;p);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line">Point::Point(Point &amp;p)&#123;</span><br><span class="line">x = p.x;</span><br><span class="line">y = p.y;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Calling the copy constructor"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;p.getX()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">func2</span><span class="params">()</span></span>&#123;</span><br><span class="line">Point a;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">Point <span class="title">a</span><span class="params">(<span class="number">4</span>,<span class="number">5</span>)</span></span>;</span><br><span class="line">Point b = a;<span class="comment">//情况一：用a初始化b。 </span></span><br><span class="line"><span class="function">Point <span class="title">c</span><span class="params">(b)</span></span>;<span class="comment">//同样是情况一，用一个对象初始化另一个对象时调用复制构造函数。 </span></span><br><span class="line"></span><br><span class="line">func1(a);<span class="comment">//情况二：函数的形参为类的对象，当调用函数时（形实结合）,复制构造函数被调用。 </span></span><br><span class="line"></span><br><span class="line">c = func2();<span class="comment">//情况三，当函数返回值是类的对象时，函数返回时，调用复制构造函数。 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;b.getX()&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://wx1.sbimg.cn/2020/08/04/PfH5k.png" alt="PfH5k.png"></p><p><strong>关于情况三</strong>：我用的Dev c++（忘了哪个版本了），运行结果显示并没有调用构造函数。书本是这么说的：</p><p><img src="https://wx1.sbimg.cn/2020/08/05/o0M82.png" alt="o0M82.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;复制构造函数&quot;&gt;&lt;a href=&quot;#复制构造函数&quot; class=&quot;headerlink&quot; title=&quot;复制构造函数&quot;&gt;&lt;/a&gt;复制构造函数&lt;/h1&gt;&lt;p&gt;$ &lt;strong&gt;复制构造函数&lt;/strong&gt;是一种特殊的构造函数，具有一般构造函数的所有特性，&lt;str
      
    
    </summary>
    
    
      <category term="C++" scheme="https://dopphu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://dopphu.github.io/tags/C/"/>
    
      <category term="C++对象" scheme="https://dopphu.github.io/tags/C-%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>web初始</title>
    <link href="https://dopphu.github.io/2020/08/02/web%E5%88%9D%E5%A7%8B/"/>
    <id>https://dopphu.github.io/2020/08/02/web%E5%88%9D%E5%A7%8B/</id>
    <published>2020-08-02T00:44:36.863Z</published>
    <updated>2020-06-10T07:17:36.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一天作业"><a href="#第一天作业" class="headerlink" title="第一天作业"></a>第一天作业</h1><h2 id="1-熟悉HTML文件结构，并练习基本标签的使用"><a href="#1-熟悉HTML文件结构，并练习基本标签的使用" class="headerlink" title="1.熟悉HTML文件结构，并练习基本标签的使用"></a>1.熟悉HTML文件结构，并练习基本标签的使用</h2><pre><code>&lt;!doctype html&gt;    &lt;html&gt;    &lt;head&gt;         &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf=8&quot; /&gt;        &lt;meta name=&quot;keyword&quot; content=&quot;...&quot; /&gt;        &lt;meta name=&quot;description&quot; content=&quot;...&quot; /&gt;        &lt;link rel=&quot;shortcut icon&quot; href=&quot;图片路径+文件名&quot; type=&quot;image/x-icon&quot; /&gt;        &lt;title&gt;...&lt;/title&gt;        &lt;link rel=&quot;stylesheet&quot; href=&quot;外部样式文件名&quot; /&gt;        &lt;style type=&quot;text/css&gt;        样式设置...        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;        网页主题内容（略）    &lt;/body&gt;    &lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;        脚本代码...    &lt;/script&gt;&lt;/html&gt;</code></pre><h2 id="2-熟悉W3C规范，熟悉语义化标签，整理每个标签对应的语义环境"><a href="#2-熟悉W3C规范，熟悉语义化标签，整理每个标签对应的语义环境" class="headerlink" title="2.熟悉W3C规范，熟悉语义化标签，整理每个标签对应的语义环境"></a>2.熟悉W3C规范，熟悉语义化标签，整理每个标签对应的语义环境</h2><pre><code>w3c标准由结构（HTML），表现（CSS）和行为（JavaScript）三部分组成w3c常见规范有：    1）定义语言编码        &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/javascript;charset=utf-8&quot;    2）JavaScript定义        &lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;        脚本代码...        &lt;/script&gt;    3）CSS定义        &lt;style type=&quot;text/css&gt;            样式设置...        &lt;/style&gt;        为保证个浏览器的兼容性，在写CSS是请带上计量单位    4）不要在注释内容中使用&quot;--&quot;        &lt;!-- 注释内容 --&gt;(实在不行&quot;=&quot;也挺好看的)    5）所有标签和属性的名字都要用小写    6）所有的属性值必须用双引号引起来    7）如果文档中要输出&gt;,&lt;和&amp;等，请使用实体转义符        &lt;p&gt;&amp;gt;&amp;lt;&amp;amp;...&lt;/p&gt;    8）要给所有的属性赋一个值,否则将属性名视为值本身        &lt;img src=&quot;...&quot; alt=&quot;...&quot; /&gt;        &lt;input type=&quot;text&quot; readonly /&gt;//相当于readonly=&quot;readonly&quot;    9）所有的标签都必须要有一个相应的结束标记（标签必须要闭合）        &lt;p&gt;...&lt;/p&gt;        &lt;hr /&gt;    10）所有的标签必须合理嵌套，不能出现嵌套交叉的情况        &lt;div&gt;&lt;p&gt;...&lt;/div&gt;&lt;/p&gt;#出现交叉错误    11）图片要添加有意义的alt的属性    12）在form表单中增加lable标签，以增加用户体验效果</code></pre><h2 id="3-练习并测试HTML标签嵌套规则"><a href="#3-练习并测试HTML标签嵌套规则" class="headerlink" title="3.练习并测试HTML标签嵌套规则"></a>3.练习并测试HTML标签嵌套规则</h2><pre><code>略。</code></pre><h2 id="4-实现如图所示网页效果"><a href="#4-实现如图所示网页效果" class="headerlink" title="4.实现如图所示网页效果"></a>4.实现如图所示网页效果</h2><pre><code>略。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一天作业&quot;&gt;&lt;a href=&quot;#第一天作业&quot; class=&quot;headerlink&quot; title=&quot;第一天作业&quot;&gt;&lt;/a&gt;第一天作业&lt;/h1&gt;&lt;h2 id=&quot;1-熟悉HTML文件结构，并练习基本标签的使用&quot;&gt;&lt;a href=&quot;#1-熟悉HTML文件结构，并练习基本
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>demo1</title>
    <link href="https://dopphu.github.io/2020/08/02/demo1/"/>
    <id>https://dopphu.github.io/2020/08/02/demo1/</id>
    <published>2020-08-02T00:44:36.613Z</published>
    <updated>2020-08-04T00:52:26.558Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ASCII码对照表</p></blockquote><p><img src="https://wx1.sbimg.cn/2020/08/04/PfoAl.png" alt="PfoAl.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;ASCII码对照表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://wx1.sbimg.cn/2020/08/04/PfoAl.png&quot; alt=&quot;PfoAl.png&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>demoTypora</title>
    <link href="https://dopphu.github.io/2020/08/02/demoTypora/"/>
    <id>https://dopphu.github.io/2020/08/02/demoTypora/</id>
    <published>2020-08-02T00:44:36.613Z</published>
    <updated>2020-06-11T11:43:34.232Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"hewwo "</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C语言文件管理</title>
    <link href="https://dopphu.github.io/2020/08/02/C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    <id>https://dopphu.github.io/2020/08/02/C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</id>
    <published>2020-08-02T00:44:36.567Z</published>
    <updated>2020-06-17T07:27:49.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言的文件管理"><a href="#C语言的文件管理" class="headerlink" title="C语言的文件管理"></a>C语言的文件管理</h1><blockquote><p>文件是任意的，示例为自己创建的文件</p></blockquote><p><img src="image-20200616144417914.png" ></img></p><ol><li>打开和关闭文件</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;    </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">FILE *cfPtr;</span><br><span class="line"><span class="keyword">if</span>((cfPtr = fopen(<span class="string">"index12.txt"</span>, <span class="string">"wb+"</span>)) == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"This file can not be opened!\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);<span class="comment">/*在头文件stdlib.h中*/</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"Succeed in openning!"</span>);</span><br><span class="line">fclose(cfPtr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p><code>fgetc()</code> 和 <code>fputc()</code></p><p>C语言系统已在头文件中把<code>fputc</code>和<code>fgetc</code>函数定义为宏名<code>putc</code>和<code>getc</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> putc(ch,fp) fputc(ch,fp)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getc(fp) fgetc(fp)</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">FILE *cfPtr;</span><br><span class="line"><span class="keyword">char</span> ch, filename[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Please input the file's name:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, filename);<span class="comment">//输入文件名</span></span><br><span class="line">getchar(); <span class="comment">//把回车符消化 </span></span><br><span class="line"><span class="keyword">if</span>((cfPtr = fopen(filename, <span class="string">"w"</span>)) == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"This file can not be opened!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入一个准备输入到文件中的字符串（以#结束）："</span>);</span><br><span class="line">ch = getchar();</span><br><span class="line"><span class="keyword">while</span>(ch != <span class="string">'#'</span>)&#123;</span><br><span class="line">fputc(ch, cfPtr);</span><br><span class="line"><span class="built_in">putchar</span>(ch);</span><br><span class="line">ch = getchar();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/*循环条件可以也可以是cfPtr!=-1或cfPtr!=EOF*/</span></span><br><span class="line">    <span class="keyword">while</span>(!feof(cfPtr))&#123;</span><br><span class="line">fputc(ch, out);</span><br><span class="line"><span class="built_in">putchar</span>(ch);</span><br><span class="line">ch = fgetc(in);</span><br><span class="line">&#125;</span><br><span class="line">fclose(cfPtr);</span><br><span class="line"><span class="built_in">putchar</span>(<span class="number">10</span>);<span class="comment">//向屏幕输出一个换行符</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>fputs</code>和<code>fgets</code></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">3</span>][<span class="number">10</span>], temp[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> i, j, k, n = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Enter strings:\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">gets(str[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((fp = fopen(<span class="string">"index2.dat"</span>, <span class="string">"w"</span>)) == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"can't open file!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\nThe new sequence:\n"</span>);</span><br><span class="line"><span class="comment">//将字符串写入文件</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="built_in">fputs</span>(str[i], fp);</span><br><span class="line"><span class="built_in">fputs</span>(<span class="string">"\n"</span>, fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,str[i]);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">20</span>]; </span><br><span class="line">    <span class="comment">//将字符串读入字符数组并打印在屏幕上</span></span><br><span class="line"><span class="keyword">while</span>(fgets(str, <span class="number">10</span>, fp) != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">&#125;</span><br><span class="line">fclose(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p><code>fprintf</code>和<code>fscanf</code>格式化读写数据文件</p></li><li><p><code>fread</code>和<code>fwrite</code></p></li><li><p>随机读写数据文件</p><p>​    <code>rewind()// 文件指针回到文首</code></p><p>​    <code>fseek(文件类型指针,位移量,起始点)</code></p></li></ol><blockquote><p>C标准指定的名字</p><p><img src="image-20200616161141526.png" ></img></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fseek(fp,<span class="number">100L</span>,<span class="number">0</span>);<span class="comment">//将文件位置标记向前移动到离文件开头100个字节处</span></span><br><span class="line">fseek(fp,<span class="number">50L</span>,<span class="number">1</span>);<span class="comment">//将文件位置标记向前移动到离当前位置50个字节处</span></span><br><span class="line">fseek(fp,<span class="number">-10L</span>,<span class="number">2</span>);<span class="comment">//将文件位置标记从文件末尾处向后退10个字节</span></span><br></pre></td></tr></table></figure><p>​        借助<code>rewind</code>和<code>fseek</code>便可实现随机读写（me：随意位置读写）</p><ol start="6"><li><p><code>ferror(fp)</code>和<code>clearerr</code></p><p>​    <code>ferror(fp)</code>返回0表示未出错，返回一个非零值，表示出错。</p><p>​    <code>clearerr</code>用来使<code>ferror(fp)</code>为零，便于继续检错。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C语言的文件管理&quot;&gt;&lt;a href=&quot;#C语言的文件管理&quot; class=&quot;headerlink&quot; title=&quot;C语言的文件管理&quot;&gt;&lt;/a&gt;C语言的文件管理&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;文件是任意的，示例为自己创建的文件&lt;/p&gt;
&lt;/blockquot
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>字符串</title>
    <link href="https://dopphu.github.io/2020/07/20/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://dopphu.github.io/2020/07/20/%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-07-20T10:14:48.171Z</published>
    <updated>2020-06-21T10:03:25.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符串的声明"><a href="#字符串的声明" class="headerlink" title="字符串的声明"></a>字符串的声明</h2><ol><li><p>通过new运算符去声明字符串</p></li><li><p>省略new声明字符串</p></li><li><p>字符串常量赋值</p><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"Dopphu"</span>);</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="built_in">String</span>(<span class="string">"Dopphu"</span>);</span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">"Dopphu"</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="访问字符串中的字符"><a href="#访问字符串中的字符" class="headerlink" title="访问字符串中的字符"></a>访问字符串中的字符</h2><p>​    访问字符串中的字符：</p><p>​        <code>字符串.length</code> 访问字符串的个数。</p><p>​        【注】中文<code>utf-8</code>（三个字符表示一个汉字） <code>gbk</code>（两个字符表示一个汉字） 在计数时都是当做一个字符计算。</p><p>​      访问字符串中单个字符：</p><p>​        <code>字符串.charAt(下标)</code> 【注】从0开始</p><p>​        字符串[下标]</p><p>​      【注】字符串是只读的。</p><h2 id="字符串查找的方法"><a href="#字符串查找的方法" class="headerlink" title="字符串查找的方法"></a>字符串查找的方法</h2><p><code>charCodeAt()</code></p><p>​        格式：<code>字符串.charCodeAt(下标)</code></p><p>​        功能：访问字符串中对应下标的ASCII码值。</p><p><code>String.fromCharCode()</code></p><p>​        格式：<code>String.fromCharCode()</code></p><p>​        功能：将传入的ASCII码值转成对应的字符，返回这个对应的字符串。</p><p><code>indexOf()</code></p><p>​        格式：<code>supStr.indexOf(subStr,start);</code></p><p>​        参数：第一个参数，查找的字符串</p><p>​                   <code>start</code> 从哪个下标开始查,不传入则从零开始找</p><p>​        功能：在<code>supStr</code>中查找<code>subStr</code>第一次出现的位置，从<code>start</code>开始查找</p><p><code>lastIndexOf()</code></p><p>​        格式：<code>字符串.lastIndexof()</code></p><p>​        参数：字符串</p><p>​        只有一个参数，查找最后一次出现的位置</p><p><code>search()</code></p><p>​        参数：字符串/正则表达式</p><p>​        只能查找第一次出现的位置，不能指定范围</p><h2 id="一点点正则"><a href="#一点点正则" class="headerlink" title="一点点正则"></a>一点点正则</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//i忽略大小写，g全局匹配</span></span><br><span class="line"><span class="keyword">var</span> demo1 = <span class="regexp">/Abc/i</span>;</span><br><span class="line"><span class="keyword">var</span> demo2 = <span class="regexp">/abc/g</span>;</span><br></pre></td></tr></table></figure><h2 id="字符串的方法"><a href="#字符串的方法" class="headerlink" title="字符串的方法"></a>字符串的方法</h2><p><code>substring</code></p><p>​        格式：<code>字符串.substring(start, end)</code></p><p>​        功能：将字符串中（start，end）部分提取，生成一个新字符串</p><p>​        返回值：生成的新字符串。</p><p><code>substr</code></p><p>​        格式：<code>字符串.substr(start, length)</code> //length为要提取的长度</p><p>​        返回值：返回新字符串。    </p><p><code>slice()</code>//数组的方法，字符串也可以调用</p><p>​        格式：<code>字符串.slice(start, end)</code></p><p>​        返回值：返回新字符串</p><p><code>split()</code>   字符串分割</p><p>​        格式：字符串.split(分隔符, length)</p><p>​        参数：</p><p>​          第一个参数，用这个分割符进行分割</p><p>​          第二个参数，控制返回数组的元素格式（返回数组中元素的个数），一般情况下不用</p><p>​        功能：用分割符对原字符串分割，进行字符串分割，将分割完的子串放在数组中返回。</p><p>​        返回值：数组</p><p>​        【注意】</p><p>​          1.相邻的两个分割符，会产生空字符串</p><p>​          2.用空字符串分割则将每个字符单独分割成子串，放在数组中。</p><p>转换大小写(产生新字符串，原字符串不变)</p><p>​        <code>toLowerCase()</code></p><p>​        <code>toUpperCase()</code></p><p><code>contact</code>进行字符串拼接</p><p>​        格式：<code>字符串.concat(str1[,str2...])</code></p><p>​        参数：字符串</p><p>​        功能：参数字符串会顺序接在原字符串后，生成新字符串原字符串不改变</p><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> demo = <span class="string">"Dppphu"</span></span><br><span class="line">alert(demo.concat(<span class="string">"asd"</span>,<span class="string">"asd"</span>));<span class="comment">//警告框输出Dopphuasdasd</span></span><br><span class="line">alert(demo);<span class="comment">//警告框输出Dopphu</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;h2 id=&quot;字符串的声明&quot;&gt;&lt;a href=&quot;#字符串的声明&quot; class=&quot;headerlink&quot; title=&quot;字符串的声明&quot;&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>严格模式片头</title>
    <link href="https://dopphu.github.io/2020/07/20/%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%E7%89%87%E5%A4%B4/"/>
    <id>https://dopphu.github.io/2020/07/20/%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%E7%89%87%E5%A4%B4/</id>
    <published>2020-07-20T10:14:48.078Z</published>
    <updated>2020-06-19T14:05:51.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="严格模式片头"><a href="#严格模式片头" class="headerlink" title="严格模式片头"></a>严格模式片头</h1><p> 严格模式：写在哪个作用域下，在哪个作用域下生效。</p><p>​        “use strict”;</p><p>​       【注】尽量不要将严格模式写在全局（me：引入别人写的js会受限制）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dmeo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">   "use strict"</span>;</span><br><span class="line">    num = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//alert(num);这行语句取消注释后运行则会报错：Uncaught ReferenceError: num is not defined</span></span><br><span class="line">&#125;</span><br><span class="line">demo();<span class="comment">//已经不在num的作用域了</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;严格模式片头&quot;&gt;&lt;a href=&quot;#严格模式片头&quot; class=&quot;headerlink&quot; title=&quot;严格模式片头&quot;&gt;&lt;/a&gt;严格模式片头&lt;/h1&gt;&lt;p&gt; 严格模式：写在哪个作用域下，在哪个作用域下生效。&lt;/p&gt;
&lt;p&gt;​        “use strict”
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>自己实现getElementsByClassName</title>
    <link href="https://dopphu.github.io/2020/07/20/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0getElementsByClassName/"/>
    <id>https://dopphu.github.io/2020/07/20/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0getElementsByClassName/</id>
    <published>2020-07-20T10:14:48.078Z</published>
    <updated>2020-06-22T13:06:34.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自己实现getElementsByClassName"><a href="#自己实现getElementsByClassName" class="headerlink" title="自己实现getElementsByClassName"></a>自己实现getElementsByClassName</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义byClassName<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        /*</span><br><span class="line">            node.getElementsByClassName()</span><br><span class="line">            这样IE8以下也可以用className来查找元素了</span><br><span class="line">        */</span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">elementsByClassName</span><span class="params">(node, classStr)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//1.获取node这个节点下所有节点</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> nodes = node.getElementsByTagName(<span class="string">"*"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> arr = [];<span class="comment">//存放符合条件的节点。</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; nodes.length; i++)&#123;</span></span><br><span class="line">                if(nodes[i].className === classStr)&#123;</span><br><span class="line">                    arr.push(nodes[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> arr;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oL = <span class="built_in">document</span>.getElementById(<span class="string">"uli"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> nodes = elementsByClassName(oL,<span class="string">"box"</span>);</span></span><br><span class="line">            alert(nodes.length);</span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; nodes.length; i++)&#123;</span></span><br><span class="line"><span class="actionscript">                nodes[i].style.backgroundColor = <span class="string">"red"</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"uli"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">name</span>=<span class="string">"hello"</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"hello"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">name</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">"oli"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自己实现getElementsByClassName&quot;&gt;&lt;a href=&quot;#自己实现getElementsByClassName&quot; class=&quot;headerlink&quot; title=&quot;自己实现getElementsByClassName&quot;&gt;&lt;/a&gt;自己实现getE
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>文档碎片实例</title>
    <link href="https://dopphu.github.io/2020/07/20/%E6%96%87%E6%A1%A3%E7%A2%8E%E7%89%87%E5%AE%9E%E4%BE%8B/"/>
    <id>https://dopphu.github.io/2020/07/20/%E6%96%87%E6%A1%A3%E7%A2%8E%E7%89%87%E5%AE%9E%E4%BE%8B/</id>
    <published>2020-07-20T10:14:48.031Z</published>
    <updated>2020-06-22T13:23:26.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文档碎片实例"><a href="#文档碎片实例" class="headerlink" title="文档碎片实例"></a>文档碎片实例</h1><p>文档碎片操作效率更高</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文档碎片<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        /*</span><br><span class="line">            创建10w个节点，添加到页面上</span><br><span class="line">        */</span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.time(<span class="string">"test1"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> newDiv = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.body.appendChild(newDiv);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.timeEnd(<span class="string">"test1"</span>);<span class="comment">//test1: 76.470703125ms</span></span></span><br><span class="line">            /*</span><br><span class="line">                先创建好10w个节点，将10w节点插入到一个节点上，最后将这一个节点添加到页面上。</span><br><span class="line">            */</span><br><span class="line"><span class="actionscript">            <span class="comment">//文档碎片操作</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.time(<span class="string">"test2"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> node = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> newDiv = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span></span><br><span class="line">                node.append(newDiv);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.body.appendChild(node);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.timeEnd(<span class="string">"test2"</span>);<span class="comment">//test2: 30.001220703125ms</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--empty--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文档碎片实例&quot;&gt;&lt;a href=&quot;#文档碎片实例&quot; class=&quot;headerlink&quot; title=&quot;文档碎片实例&quot;&gt;&lt;/a&gt;文档碎片实例&lt;/h1&gt;&lt;p&gt;文档碎片操作效率更高&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>添加删除节点操作</title>
    <link href="https://dopphu.github.io/2020/07/20/%E6%B7%BB%E5%8A%A0%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C/"/>
    <id>https://dopphu.github.io/2020/07/20/%E6%B7%BB%E5%8A%A0%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9%E6%93%8D%E4%BD%9C/</id>
    <published>2020-07-20T10:14:48.000Z</published>
    <updated>2020-07-30T13:44:43.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="添加删除节点操作"><a href="#添加删除节点操作" class="headerlink" title="添加删除节点操作"></a>添加删除节点操作</h1><p>直接丢一个例子叭</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>节点操作案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#div1</span>&#123;</span></span><br><span class="line">            width: 400px;height: 100px;background-color: burlywood;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#div2</span>&#123;</span></span><br><span class="line">            width: 400px;height: 500px;background-color: orange;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#div2</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line">            border: 1px dotted purple;padding: 2px;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-id">#div2</span> <span class="selector-tag">div</span> <span class="selector-tag">button</span>&#123;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            right: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oDiv1 = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oDiv2 = <span class="built_in">document</span>.getElementById(<span class="string">"div2"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oInput = <span class="built_in">document</span>.getElementById(<span class="string">"input1"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//获取div1下的面所有的button</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> aBtns = oDiv1.getElementsByTagName(<span class="string">"button"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//分别给三个按钮添加不同的点击函数</span></span></span><br><span class="line"><span class="actionscript">            aBtns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">                if(!oInput.value)&#123;</span><br><span class="line"><span class="actionscript">                    alert(<span class="string">"输入内容不能为空！"</span>);</span></span><br><span class="line"><span class="actionscript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//获取输入框中的内容，创建节点添加到页面上</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> newDiv = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> oTxt = <span class="built_in">document</span>.createTextNode(oInput.value);</span></span><br><span class="line">                    newDiv.appendChild(oTxt);</span><br><span class="line">                    oDiv2.appendChild(newDiv);</span><br><span class="line"><span class="actionscript">                    oInput.value = <span class="string">""</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            aBtns[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//删除最后一个节点</span></span></span><br><span class="line">                oDiv2.removeChild(oDiv2.lastChild);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            aBtns[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> newNode = oDiv2.lastChild.cloneNode(<span class="literal">true</span>);</span></span><br><span class="line">                oDiv2.appendChild(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"input1"</span> <span class="attr">placeholder</span>=<span class="string">"输入内容"</span>/&gt;</span><span class="tag">&lt;/<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"add"</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"delete"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"copy"</span>&gt;</span>拷贝<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--仅用来显示，无实际意义--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>xxx<span class="tag">&lt;<span class="name">button</span>&gt;</span>x<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>xxx<span class="tag">&lt;<span class="name">button</span>&gt;</span>x<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>xxx<span class="tag">&lt;<span class="name">button</span>&gt;</span>x<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;添加删除节点操作&quot;&gt;&lt;a href=&quot;#添加删除节点操作&quot; class=&quot;headerlink&quot; title=&quot;添加删除节点操作&quot;&gt;&lt;/a&gt;添加删除节点操作&lt;/h1&gt;&lt;p&gt;直接丢一个例子叭&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;t
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>算数运算符</title>
    <link href="https://dopphu.github.io/2020/07/20/%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://dopphu.github.io/2020/07/20/%E7%AE%97%E6%95%B0%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2020-07-20T10:14:47.875Z</published>
    <updated>2020-06-19T12:49:21.084Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h1><p>运算符：</p><p>​      1.算数运算符</p><p>​        + - * / %（取余）</p><p>​      2.关系运算符</p><p>​        &gt; &lt; &gt;= &lt;= == != ===(恒等) !==</p><p>​      3.逻辑运算符</p><p>​        || &amp;&amp; !</p><p>​      4.一元运算符</p><p>​        ++ –</p><p>​      5.赋值运算符</p><p>​        &lt;1&gt;基本赋值运算符</p><p>​        &lt;2&gt;复合赋值运算符 += -= … *=</p><p>表达式：任何数据和运算符组成的式子</p><p>自动数据类型转换：不同数据类型之间是没有办法进行运算，将数据转换为同一类型，再进行运算。</p><p>​      1.其中有一个操作数必须为字符串，运算符必须是+号，别的会会转换为字符串，再进行字符串拼接。</p><p>​      2.如果字符串中含有字符串以外的别的字符，转成NaN，NaN和任何数据类型运算都是NaN</p><p>​      3.除了字符串以外的数据，在进行算数运算的时候，先转成数字，在进行运算。</p><p>JS中除数可以为0，会得到</p><p>   infinity（无穷大）-infinity（无穷小）</p><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">"Hellwo"</span>+<span class="literal">true</span>);<span class="comment">//Hellwotrue</span></span><br><span class="line">alert(<span class="string">"Hellwo"</span>+<span class="number">100</span>);<span class="comment">//Hellwo100</span></span><br><span class="line">alert(<span class="string">"Hellwo"</span>+<span class="literal">undefined</span>);<span class="comment">//Hellwoundefined</span></span><br><span class="line">alert(<span class="string">"Hellwo"</span>+<span class="literal">NaN</span>);<span class="comment">//HellwoNaN</span></span><br><span class="line"></span><br><span class="line">alert(<span class="number">100</span>-<span class="string">"1a"</span>);<span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line">alert(<span class="number">100</span>-<span class="literal">null</span>);<span class="comment">//100</span></span><br><span class="line">alert(<span class="number">100</span>-<span class="literal">true</span>);<span class="comment">//99</span></span><br><span class="line">alert(<span class="number">100</span>-<span class="literal">undefined</span>);<span class="comment">//NaN</span></span><br><span class="line">alert(<span class="number">100</span>-<span class="literal">NaN</span>);<span class="comment">//NaN</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;算数运算符&quot;&gt;&lt;a href=&quot;#算数运算符&quot; class=&quot;headerlink&quot; title=&quot;算数运算符&quot;&gt;&lt;/a&gt;算数运算符&lt;/h1&gt;&lt;p&gt;运算符：&lt;/p&gt;
&lt;p&gt;​      1.算数运算符&lt;/p&gt;
&lt;p&gt;​        + - * / %（取余）&lt;/
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>数组</title>
    <link href="https://dopphu.github.io/2020/07/20/%E6%95%B0%E7%BB%84/"/>
    <id>https://dopphu.github.io/2020/07/20/%E6%95%B0%E7%BB%84/</id>
    <published>2020-07-20T10:14:47.828Z</published>
    <updated>2020-06-19T14:06:32.295Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ol><li><p>数组的声明</p><p>​        1.通过new创建数组</p><p>​        2.省略new运算符创建数组</p><p>​        3.数组常量进行赋值（JS中一般使用中括号[]）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,...,n];</span><br></pre></td></tr></table></figure></li><li><p><code>数组.length</code>返回数组中元素个数</p><p>​    访问数组元素：</p><p>​                数组[下标]  下标从0开始</p></li></ol><p>乱入…</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.random(n,m);<span class="comment">//左闭右开，随机小数</span></span><br></pre></td></tr></table></figure><ol start="3"><li>for循环遍历数组</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr)&#123;</span><br><span class="line">    <span class="comment">//empty</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><p>数组是引用数据类型</p><p>​    数组，数组的变量存储的是数据的地址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>];</span><br><span class="line">alert(arr);<span class="comment">//警告框：10,20,30,40</span></span><br></pre></td></tr></table></figure></li><li><p>数组的方法</p><p>数组的方法：</p><p>​        栈结构：</p><p>​          栈：木盆</p><p>​          结构：从同一头进，从同一头出</p><p>​          特点：先进后出</p><p>​        数组的两个方法形成栈结构</p><p>​          <code>push</code></p><p>​            格式：<code>数组.push(参数1,参数2,...)</code></p><p>​            功能：给数组的末尾添加元素。</p><p>​            返回值：插完元素以后数组的长度。</p><p>​          <code>pop</code></p><p>​            格式：<code>数组.pop()</code></p><p>​            参数：没有参数。</p><p>​            返回值：取下的那一个元素。</p><p>​            功能：从数组末尾取下一个元素。</p><p>​        队列结构：</p><p>​          结构：从末尾进，从头部出</p><p>​          特点：先进先出</p></li></ol><p>   ​            <code>push</code></p><p>   ​            <code>shift()</code></p><p>   ​              格式：<code>数组.shift()</code></p><p>   ​              参数：没有参数。</p><p>   ​              功能：从数组的头部取下一个元素。</p><p>   ​              返回值：取下的元素。</p><p>   ​            </p><p>   ​            <code>unshift()</code></p><p>   ​              格式：<code>数组.unshift(参数1,参数2,...)</code></p><p>   ​              功能：从数组的头部插入元素。</p><p>   ​              返回值：插完元素以后数组的长度。</p><p>   ​              【注】就算传入的数据是数组，数组中的元素要单独挑出来再进行合并。</p><p>   ​        <code>concat()</code></p><p>   ​        1.拷贝原数组，生成新数组</p><p>   ​        2.合并数组</p><p>   ​          格式：<code>数组.contact(数据1,数据2,...)</code></p><p>   ​          返回值：合并产生的新数组，原数组不会改变。</p><p>   ​        <code>slice()</code></p><p>   ​          格式：数组.slice(start,end) 区间左闭右开</p><p>   ​          功能：可以基于当前数组获取指定区域的元素[start,end),提取出元素生成新数组。</p><p>   ​          返回值：生成的新数组，原数组不会发生任何改变。</p><p>   ​        </p><p>   ​        <code>splice()</code></p><p>   ​          格式：<code>数组.splice(start, length, 数据1, 数据2...)</code></p><p>   ​          参数：</p><p>   ​            start： 开始截取的位置</p><p>   ​            length： 截取元素的长度（原数组发生改变）</p><p>   ​            第三个及之后的参数： 在start位置，在原数组插入的元素</p><p>   ​          返回值：截取下来的元素组成的数组 </p><p>   ​          【注】在视觉上可以用来修改原数组的值</p><p>   ​        </p><p>   ​        <code>join()</code></p><p>   ​          格式：<code>数组.join(字符串)</code></p><p>   ​          功能：将数组中的元素，用传入的拼接符，拼接成一个字符串</p><p>   ​          返回值：拼接好的新字符串,原数组不变。</p><p>   ​    </p><p>   ​        <code>reverse()</code> </p><p>   ​          功能：将数组逆序，原数组改变</p><p>   ​          返回值：已经逆序的原数组</p><p>   ​        <code>sort()</code></p><p>   ​          从小到大排序，默认按字符串排序</p><p>   ​          参数：一个函数，代表你要怎样进行排序</p><p>   ​            例如：</p><pre><code>            <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">value1,value2</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value1 - value2;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//从小到大排序</span></span><br><span class="line"><span class="comment">//value1 和 value2换过来即为从大到小排序</span></span><br></pre></td></tr></table></figure>数组是引用数据类型</code></pre><p>   ​    数组，数组的变量存储的是数据的地址</p><ol start="6"><li>二维数组（非官方概念）</li></ol><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>(</span><br><span class="line">            [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">            [<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>],</span><br><span class="line">            <span class="number">100</span>,</span><br><span class="line">            [<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>],</span><br><span class="line">            [<span class="number">21</span>,<span class="number">22</span>,<span class="number">23</span>,<span class="number">24</span>,<span class="number">25</span>]</span><br><span class="line">        );</span><br></pre></td></tr></table></figure><ol start="7"><li>ECMA6数组新特性待补充</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;数组的声明&lt;/p&gt;
&lt;p&gt;​        1.通过new创建数组&lt;/p&gt;
&lt;p&gt;​        2.省略new运算符创
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>属性节点</title>
    <link href="https://dopphu.github.io/2020/07/20/%E5%B1%9E%E6%80%A7%E8%8A%82%E7%82%B9/"/>
    <id>https://dopphu.github.io/2020/07/20/%E5%B1%9E%E6%80%A7%E8%8A%82%E7%82%B9/</id>
    <published>2020-07-20T10:14:47.797Z</published>
    <updated>2020-06-22T13:05:16.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="属性节点"><a href="#属性节点" class="headerlink" title="属性节点"></a>属性节点</h1><p>直接上例子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>attribute和元素属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        /*</span><br><span class="line">            setAttribute</span><br><span class="line">            getAttribute</span><br><span class="line">            removeAttribute()</span><br><span class="line">        */</span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// alert(oDiv.id);</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// alert(oDiv.title);</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// alert(oDiv.getAttribute("id"));</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// alert(oDiv.getAttribute("title"));</span></span></span><br><span class="line">            </span><br><span class="line"><span class="actionscript">            <span class="comment">// /*</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//     1.class的访问</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// */</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// /*区别1*/</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// alert(oDiv.className);</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// alert(oDiv.getAttribute("class"));</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// /*区别2*/</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// alert(oDiv.xxx);//自定义属性访问不到undefined</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// alert(oDiv.getAttribute("xxx"));</span></span></span><br><span class="line">            </span><br><span class="line"><span class="actionscript">            <span class="comment">// oDiv.className = "000";</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// oDiv.zzz = "zzz";</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// oDiv.setAttribute("zzz","zzz");</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// alert(oDiv.getAttribute("zzz"));</span></span></span><br><span class="line">            </span><br><span class="line"><span class="actionscript">            <span class="comment">//两种移除方式有区别</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// oDiv.title = "";</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//oDiv.removeAttribute("title");</span></span></span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">            innerHTML     获取标签间内容</span><br><span class="line">            innerText     获取纯文本，不会解析标签设置纯文本</span><br><span class="line">            outerHTML     从外标签开始到外标签结束</span><br><span class="line">        */</span><br><span class="line">        alert(oDiv.innerHTML);</span><br><span class="line"><span class="handlebars"><span class="xml">        // oDiv.innerHTML = "<span class="tag">&lt;<span class="name">strong</span>&gt;</span>HELP<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>"</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// oDiv.innerText = ""</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        oDiv.innerText = "<span class="tag">&lt;<span class="name">strong</span>&gt;</span>HELP<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>";</span></span></span><br><span class="line">        alert(oDiv.outerHTML);</span><br><span class="line"><span class="handlebars"><span class="xml">        oDiv.outerHTML = "<span class="tag">&lt;<span class="name">strong</span>&gt;</span>123<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>";</span></span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">title</span>=<span class="string">"hellow"</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">xxx</span>=<span class="string">"自定义属性"</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>attributes</code> 获取当前元素节点上的属性节点;//集合</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>属性节点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">        /*</span><br><span class="line"><span class="actionscript">            attributes 获取当前元素节点上的属性节点;<span class="comment">//集合</span></span></span><br><span class="line">        */</span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> oDiv = sdocument.getElementById(<span class="string">"div1"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//getNamedItem() 方法可返回指定的节点。</span></span></span><br><span class="line"><span class="actionscript">            alert(oDiv.attributes.getNamedItem(<span class="string">"id"</span>).nodeType);</span></span><br><span class="line"><span class="actionscript">            alert(oDiv.attributes[<span class="string">"id"</span>].nodeType);</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;属性节点&quot;&gt;&lt;a href=&quot;#属性节点&quot; class=&quot;headerlink&quot; title=&quot;属性节点&quot;&gt;&lt;/a&gt;属性节点&lt;/h1&gt;&lt;p&gt;直接上例子&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>事件练习</title>
    <link href="https://dopphu.github.io/2020/07/20/%E4%BA%8B%E4%BB%B6%E7%BB%83%E4%B9%A0/"/>
    <id>https://dopphu.github.io/2020/07/20/%E4%BA%8B%E4%BB%B6%E7%BB%83%E4%B9%A0/</id>
    <published>2020-07-20T10:14:47.750Z</published>
    <updated>2020-06-23T12:56:59.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件练习"><a href="#事件练习" class="headerlink" title="事件练习"></a>事件练习</h1><p><strong>随鼠标移动的小方块</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件练习1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        *&#123;</span><br><span class="line">            margin: 0;padding: 0;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">        /* body&#123;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125; */</span><br><span class="line"><span class="css">        <span class="selector-id">#div1</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">width</span>: 208<span class="selector-tag">px</span>;<span class="selector-tag">height</span>: 208<span class="selector-tag">px</span>;<span class="selector-tag">background-color</span>: <span class="selector-tag">cyan</span>; <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;<span class="comment">/*background: url("Lucky.jpg") no-repeat;*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> e = ev || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//使鼠标位于小方块大概中心的位置</span></span></span><br><span class="line"><span class="actionscript">                oDiv.style.left = e.clientX - <span class="number">104</span> + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">                oDiv.style.top = e.clientY - <span class="number">104</span> + <span class="string">"px"</span>;</span></span><br><span class="line">            &#125;               </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>鼠标移动的小尾巴</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件练习2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        *&#123;</span><br><span class="line">            margin: 0;padding: 0;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">div</span>&#123;<span class="attribute">position</span>: absolute;<span class="attribute">width</span>: <span class="number">20px</span>;<span class="attribute">height</span>: <span class="number">20px</span>;<span class="attribute">background-color</span>: cyan;<span class="attribute">border-radius</span>: <span class="number">10px</span>;<span class="attribute">position</span>: absolute;&#125;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> arr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> e = ev || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//让下标为0的div跟随鼠标移动</span></span></span><br><span class="line"><span class="actionscript">                arr[<span class="number">0</span>].style.left = e.clientX + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">                arr[<span class="number">0</span>].style.top = e.clientY + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//错落有致，前后相随，后一个落在前一个先前的位置，前一个再落到前前一个之前的位置...依次落</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">for</span>(<span class="keyword">var</span> i = arr.length <span class="number">-1</span>; i &gt; [<span class="number">0</span>];i--)&#123;</span></span><br><span class="line"><span class="actionscript">                    arr[i].style.left = arr[i - <span class="number">1</span>].offsetLeft + <span class="string">"px"</span>;</span></span><br><span class="line"><span class="actionscript">                    arr[i].style.top = arr[i - <span class="number">1</span>].offsetTop + <span class="string">"px"</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;事件练习&quot;&gt;&lt;a href=&quot;#事件练习&quot; class=&quot;headerlink&quot; title=&quot;事件练习&quot;&gt;&lt;/a&gt;事件练习&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;随鼠标移动的小方块&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>事件对象</title>
    <link href="https://dopphu.github.io/2020/07/20/%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1/"/>
    <id>https://dopphu.github.io/2020/07/20/%E4%BA%8B%E4%BB%B6%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-07-20T10:14:47.735Z</published>
    <updated>2020-06-23T07:32:08.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h1><p><strong>事件绑定</strong></p><p>元素节点.on + 事件类型 = 匿名函数;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【注】系统会在事件绑定一旦完成的时候，生成一个事件对象</p><p><strong>下面获取事件对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">"btn1"</span>);<span class="comment">//假设有这么一个按钮，嘻嘻</span></span><br><span class="line">    <span class="comment">// oBtn.onclick = show;</span></span><br><span class="line">    oBtn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//这种通过形参拿事件对象的方式IE8以下不兼容。 IE8以下 window.event;</span></span><br><span class="line">        <span class="keyword">var</span> e = ev || <span class="built_in">window</span>.event;<span class="comment">//兼容处理</span></span><br><span class="line">        alert(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>事件对象的属性</strong></p><ol><li><p>鼠标事件</p><p>button属性</p><table><thead><tr><th align="center">button属性的值</th><th align="center">鼠标的键</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">左键</td></tr><tr><td align="center">1</td><td align="center">滚轮</td></tr><tr><td align="center">2</td><td align="center">右键</td></tr></tbody></table><p>获取当前鼠标位置ev.xxx：（原点位置不同）</p><table><thead><tr><th align="center"><strong>clientX</strong></th><th align="center"><strong>clientY</strong></th><th align="center"><strong>原点位置：可视窗口的左上角为原点</strong></th></tr></thead><tbody><tr><td align="center"><strong>pageX</strong></td><td align="center"><strong>pageY</strong></td><td align="center"><strong>原点位置：整个页面左上角(包含滚出去的滚动距离)</strong></td></tr><tr><td align="center"><strong>screenX</strong></td><td align="center"><strong>screenY</strong></td><td align="center"><strong>原点位置：电脑屏幕左上角为原点</strong></td></tr></tbody></table></li><li><p>键盘事件</p><p>属性：</p><p>shiftKey  按下shift键，为true，默认为false</p><p>altKey   </p><p>ctrlKey   </p><p>metaKey   windows系统   按下window键，为true</p><p>​                   macos系统    按下command键，为true</p><p>​        【注】和别的操作进行组合，形成一些快捷键操作</p><p>//which在IE8及以下不支持</p><p>​      <code>keyCode</code> 键码</p><p>​      <code>which</code></p><p>​      返回值：键码返回的是大写字母的ASCII值，不区分大小写，支持全键盘</p><p>​      格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> which = e.which || e.keyCode;</span><br></pre></td></tr></table></figure><p>​      【注】只在keydown下支持</p><p>​      <code>charCode</code> 字符码</p><p>​      <code>which</code></p><p>​      格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> which = e.which || e.charCode;</span><br></pre></td></tr></table></figure><p>​      【注】只在keypress(字符键0-9及26个字母)下支持,只支持字符</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;事件对象&quot;&gt;&lt;a href=&quot;#事件对象&quot; class=&quot;headerlink&quot; title=&quot;事件对象&quot;&gt;&lt;/a&gt;事件对象&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;事件绑定&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;元素节点.on + 事件类型 = 匿名函数;&lt;/p&gt;
&lt;figur
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
