<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Welcome to Dopphu&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dopphu.github.io/"/>
  <updated>2020-08-14T07:45:07.237Z</updated>
  <id>https://dopphu.github.io/</id>
  
  <author>
    <name>Dopphu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动态内存分配</title>
    <link href="https://dopphu.github.io/2020/08/14/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
    <id>https://dopphu.github.io/2020/08/14/%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</id>
    <published>2020-08-14T07:46:34.519Z</published>
    <updated>2020-08-14T07:45:07.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cplusplus动态内存分配"><a href="#Cplusplus动态内存分配" class="headerlink" title="Cplusplus动态内存分配"></a>Cplusplus动态内存分配</h1><p><strong>$</strong> 在C++中，动态内存分配技术可以保证程序在运行过程中按照实际需要申请适量的内存，使用结束后还可以释放，这种程序运行过程中申请和释放的存储单元也称为<strong>堆对象</strong>，申请和删除。</p><p><strong>$</strong> 在C++程序中建立和删除堆对象使用两个运算符： <code>new</code> 和 <code>delete</code> 。</p><p>语法形式为：</p><p><code>new 数据类型 (初始化参数列表);</code></p><p>如果申请成功，new运算便返回一个指向新分配内存首地址的类型的指针，可以通过这个指针对堆对象进行访问；申请失败则会抛出异常。</p><p><strong>$</strong> 如果建立的对象是一个基本类型变量，初始化的过程就是赋值，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *<span class="built_in">point</span>;</span><br><span class="line"><span class="built_in">point</span> = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p><strong>细节</strong>：对于基本数据类型，如果不希望在分配内存后设定初值，可以把括号省去，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *<span class="built_in">point</span> = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br></pre></td></tr></table></figure><p>如果保留括号，但括号中不写任何数值，则表示用0对该对象初始化，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *<span class="built_in">point</span> = <span class="keyword">new</span> <span class="keyword">int</span>();</span><br></pre></td></tr></table></figure><p><img src="https://www.zx95.net/images/2020/08/13/image66d5122993f92562.png" alt="image66d5122993f92562.png"></p><p>运算符delete用来删除由 new 建立的对象，释放指针所指向的内存空间。格式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> 指针名;</span><br></pre></td></tr></table></figure><p><img src="https://www.zx95.net/images/2020/08/13/imagee70c9f22b0a0c0a6.png" alt="imagee70c9f22b0a0c0a6.png"></p><p><em>动态创建对象例子：</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Point(<span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">0</span>):x(x), y(y)&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"the "</span>&lt;&lt;count&lt;&lt;<span class="string">" Construction called!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Point(<span class="keyword">const</span> Point &amp;p)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"the copy "</span>&lt;&lt;count&lt;&lt;<span class="string">" called!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">count++;</span><br><span class="line">&#125; </span><br><span class="line">~Point()&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"the "</span>&lt;&lt;count--&lt;&lt;<span class="string">" destruction called!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">int</span> Point::count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Point *p = <span class="keyword">new</span> Point;</span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://www.zx95.net/images/2020/08/13/image5fee3f0afbcefe5a.png" alt="image5fee3f0afbcefe5a.png"></p><h2 id="动态创建数组"><a href="#动态创建数组" class="headerlink" title="动态创建数组"></a>动态创建数组</h2><p><strong>$</strong> 使用运算符new也可以创建数组类型的对象，这时候需要给出数组的结构说明。用new运算符动态创建一维数组的语法形式为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类型名 [数组长度];</span><br></pre></td></tr></table></figure><p>其中数组长度指出了元素的个数，它可以是任何能够得到正整数值的表达式。</p><p><img src="https://www.zx95.net/images/2020/08/13/image544f7c64641f23ee.png" alt="image544f7c64641f23ee.png"></p><p>如果是用 <code>new</code> 建立的数组，用 <code>delete</code> 删除时在指针名前面要加”[]”，格式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span>[] 指针名;</span><br></pre></td></tr></table></figure><p><em>动态创建数组对象（数组元素也是对象）：</em></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Point(<span class="keyword">int</span> x = <span class="number">0</span>, <span class="keyword">int</span> y = <span class="number">0</span>):x(x), y(y)&#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"the "</span>&lt;&lt;count&lt;&lt;<span class="string">" instruction called!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Point(<span class="keyword">const</span> Point &amp;p)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"the copy "</span>&lt;&lt;count&lt;&lt;<span class="string">" called!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">count++;</span><br><span class="line">&#125; </span><br><span class="line">~Point()&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"the "</span>&lt;&lt;count--&lt;&lt;<span class="string">" destruction called!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">int</span> Point::count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Point *p = <span class="keyword">new</span> Point[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">delete</span>[] p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://www.zx95.net/images/2020/08/13/imagefcf0a43b030a0472.png" alt="imagefcf0a43b030a0472.png"></p><p>me：当用delete释放对象数组所占据的内存时，似乎是正序构造，倒叙解构。</p><p>下面再搬运一个书本的例子（实现了数组下标检查）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Point(): x(<span class="number">0</span>), y(<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Default Constructor called."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Point(<span class="keyword">int</span> x, <span class="keyword">int</span> y)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Constructor called."</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line">~Point()&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Destructor called."</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span><span class="keyword">const</span></span>&#123;<span class="keyword">return</span> x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span><span class="keyword">const</span></span>&#123;<span class="keyword">return</span> y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> newX, <span class="keyword">int</span> newY)</span></span>&#123;</span><br><span class="line">x = newX;</span><br><span class="line">y = newY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//动态数组类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayOfPoints</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">ArrayOfPoints(<span class="keyword">int</span> <span class="built_in">size</span>) : <span class="built_in">size</span>(<span class="built_in">size</span>) &#123;</span><br><span class="line">points = <span class="keyword">new</span> Point[<span class="built_in">size</span>];</span><br><span class="line">&#125;</span><br><span class="line">~ArrayOfPoints()&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Deleting···"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">delete</span>[] points;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point &amp;<span class="title">element</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">assert(index&gt;=<span class="number">0</span> &amp;&amp; index&lt;<span class="built_in">size</span>);<span class="comment">//实现了下标检查</span></span><br><span class="line"><span class="keyword">return</span> points[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Point *points;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Please enter the count of points:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;count;</span><br><span class="line"><span class="function">ArrayOfPoints <span class="title">points</span><span class="params">(count)</span></span>;</span><br><span class="line">points.element(<span class="number">0</span>).<span class="built_in">move</span>(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">points.element(<span class="number">1</span>).<span class="built_in">move</span>(<span class="number">6</span>, <span class="number">66</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://www.zx95.net/images/2020/08/13/image02cb72f5c0b7ab5f.png" alt="image02cb72f5c0b7ab5f.png"></p><p><img src="https://www.zx95.net/images/2020/08/13/image1eeece11bc27e735.png" alt="image1eeece11bc27e735.png"></p><h2 id="动态创建多维数组"><a href="#动态创建多维数组" class="headerlink" title="动态创建多维数组"></a>动态创建多维数组</h2><p><strong>$</strong> 用new操作也可以创建多维数组，形式如下：</p><p><code>new    类型名T[数组第一维长度][数组第二维长度]···;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类型名T[数组第一维长度][数组第二维长度]···;</span><br></pre></td></tr></table></figure><p>注意：<strong>其中数组第一维长度可以是任何结果为正整数的表达式，而其他各维数组长度必须是结果为正整数的常量表达式。</strong></p><p>如果内存申请成功，new返回一个指向新分配内存的首地址的指针，但不是T类型的指针，而是指向T类型数组的指针，数组元素的个数为除组左边一维外各维下标表达式的乘积。例如，如下语句：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> (*cp)[<span class="number">25</span>][<span class="number">10</span>];</span><br><span class="line">cp = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">10</span>][<span class="number">25</span>][<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>如此得到的指针<code>cp</code>，既可以作为指针使用，也可以像一个三维数组名一样使用，请看如下程序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">float</span> (*cp)[<span class="number">9</span>][<span class="number">8</span>] = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">8</span>][<span class="number">9</span>][<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span>; j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; k++)</span><br><span class="line"><span class="comment">//以指针形式访问数组元素</span></span><br><span class="line">*(*(*(cp+i)+j)+k) = <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(i*<span class="number">100</span> + j*<span class="number">10</span> + k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">8</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j&lt;<span class="number">9</span>; j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; k++)</span><br><span class="line"><span class="comment">//将指针cp作为数组名使用，通过数组名和下标访问数组元素 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(!(k%<span class="number">8</span>)?<span class="string">"\n"</span>:<span class="string">" "</span>)&lt;&lt;cp[i][j][k]; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span>[] cp;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：（部分）</p><p><img src="https://wx1.sbimg.cn/2020/08/13/3M2XK.png" alt="3M2XK.png"></p><h2 id="用vector创建数组对象"><a href="#用vector创建数组对象" class="headerlink" title="用vector创建数组对象"></a>用vector创建数组对象</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">average</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; &amp;arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">unsigned</span> i = <span class="number">0</span>; i&lt;arr.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">sum+=arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum/arr.<span class="built_in">size</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">unsigned</span> n;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"n="</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; <span class="title">arr</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Please input "</span>&lt;&lt;n&lt;&lt;<span class="string">" real numbers:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">unsigned</span> i = <span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Average="</span>&lt;&lt;average(arr)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Cplusplus动态内存分配&quot;&gt;&lt;a href=&quot;#Cplusplus动态内存分配&quot; class=&quot;headerlink&quot; title=&quot;Cplusplus动态内存分配&quot;&gt;&lt;/a&gt;Cplusplus动态内存分配&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;$&lt;/strong&gt;
      
    
    </summary>
    
    
      <category term="C++" scheme="https://dopphu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://dopphu.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>深复制和浅复制</title>
    <link href="https://dopphu.github.io/2020/08/14/%E6%B7%B1%E5%A4%8D%E5%88%B6%E5%92%8C%E6%B5%85%E5%A4%8D%E5%88%B6/"/>
    <id>https://dopphu.github.io/2020/08/14/%E6%B7%B1%E5%A4%8D%E5%88%B6%E5%92%8C%E6%B5%85%E5%A4%8D%E5%88%B6/</id>
    <published>2020-08-14T07:46:34.519Z</published>
    <updated>2020-08-14T07:42:44.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深复制和浅复制"><a href="#深复制和浅复制" class="headerlink" title="深复制和浅复制"></a>深复制和浅复制</h1><p>对象的<strong>浅复制</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Point(): x(<span class="number">0</span>), y(<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Default Constructor called."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Point(<span class="keyword">int</span> x, <span class="keyword">int</span> y)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Constructor called."</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line">~Point()&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Destructor called."</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span><span class="keyword">const</span></span>&#123;<span class="keyword">return</span> x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span><span class="keyword">const</span></span>&#123;<span class="keyword">return</span> y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> newX, <span class="keyword">int</span> newY)</span></span>&#123;</span><br><span class="line">x = newX;</span><br><span class="line">y = newY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//动态数组类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayOfPoints</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">ArrayOfPoints(<span class="keyword">int</span> <span class="built_in">size</span>) : <span class="built_in">size</span>(<span class="built_in">size</span>) &#123;</span><br><span class="line">points = <span class="keyword">new</span> Point[<span class="built_in">size</span>];</span><br><span class="line">&#125;</span><br><span class="line">~ArrayOfPoints()&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Deleting···"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">delete</span>[] points;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point &amp;<span class="title">element</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">assert(index&gt;=<span class="number">0</span> &amp;&amp; index&lt;<span class="built_in">size</span>);<span class="comment">//拥有了下标检测 </span></span><br><span class="line"><span class="keyword">return</span> points[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Point *points;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Please enter the count of points:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;count;</span><br><span class="line"><span class="function">ArrayOfPoints <span class="title">pointsArray1</span><span class="params">(count)</span></span>;</span><br><span class="line">pointsArray1.element(<span class="number">0</span>).<span class="built_in">move</span>(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">pointsArray1.element(<span class="number">1</span>).<span class="built_in">move</span>(<span class="number">15</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">ArrayOfPoints pointsArray2 = pointsArray1;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Copy of pointsArray1:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Point_0 of array2:"</span>&lt;&lt;pointsArray2.element(<span class="number">0</span>).getX()&lt;&lt;<span class="string">","</span></span><br><span class="line">&lt;&lt;pointsArray2.element(<span class="number">0</span>).getY()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Point_0 of array2:"</span>&lt;&lt;pointsArray2.element(<span class="number">1</span>).getX()&lt;&lt;<span class="string">","</span></span><br><span class="line">&lt;&lt;pointsArray2.element(<span class="number">1</span>).getY()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">pointsArray1.element(<span class="number">0</span>).<span class="built_in">move</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">pointsArray1.element(<span class="number">1</span>).<span class="built_in">move</span>(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"After the moving of pointsArray1:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Point_0 of array2:"</span>&lt;&lt;pointsArray2.element(<span class="number">0</span>).getX()&lt;&lt;<span class="string">","</span></span><br><span class="line">&lt;&lt;pointsArray2.element(<span class="number">0</span>).getY()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Point_0 of array2:"</span>&lt;&lt;pointsArray2.element(<span class="number">1</span>).getX()&lt;&lt;<span class="string">","</span></span><br><span class="line">&lt;&lt;pointsArray2.element(<span class="number">1</span>).getY()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的结果是一个死循环（2为输入值）。如下:</p><p><img src="https://www.zx95.net/images/2020/08/14/image2e6caea7698907af.png" alt="image2e6caea7698907af.png"></p><p><img src="https://www.zx95.net/images/2020/08/14/image.png" alt="image.png"></p><p>示意图：</p><p><img src="https://www.zx95.net/images/2020/08/14/image3d377816ec4e543e.png" alt="image3d377816ec4e543e.png"></p><p>要解决这个问题就要实现<strong>深复制</strong>，做法是自定义复制构造函数。如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Point(): x(<span class="number">0</span>), y(<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Default Constructor called."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Point(<span class="keyword">int</span> x, <span class="keyword">int</span> y)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Constructor called."</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line">~Point()&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Destructor called."</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span><span class="keyword">const</span></span>&#123;<span class="keyword">return</span> x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span><span class="keyword">const</span></span>&#123;<span class="keyword">return</span> y;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> newX, <span class="keyword">int</span> newY)</span></span>&#123;</span><br><span class="line">x = newX;</span><br><span class="line">y = newY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//动态数组类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayOfPoints</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">ArrayOfPoints(<span class="keyword">int</span> <span class="built_in">size</span>) : <span class="built_in">size</span>(<span class="built_in">size</span>) &#123;</span><br><span class="line">points = <span class="keyword">new</span> Point[<span class="built_in">size</span>];</span><br><span class="line">&#125;</span><br><span class="line">~ArrayOfPoints()&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Deleting···"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">delete</span>[] points;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point &amp;<span class="title">element</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">assert(index&gt;=<span class="number">0</span> &amp;&amp; index&lt;<span class="built_in">size</span>);<span class="comment">//拥有了下标检测 </span></span><br><span class="line"><span class="keyword">return</span> points[index];</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//自定义复制构造函数</span></span><br><span class="line">ArrayOfPoints(ArrayOfPoints&amp; v)&#123;</span><br><span class="line"><span class="built_in">size</span> = v.<span class="built_in">size</span>;</span><br><span class="line">points = <span class="keyword">new</span> Point[<span class="built_in">size</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="built_in">size</span>; i++)&#123;</span><br><span class="line">points[i] = v.points[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Point *points;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Please enter the count of points:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;count;</span><br><span class="line"><span class="function">ArrayOfPoints <span class="title">pointsArray1</span><span class="params">(count)</span></span>;</span><br><span class="line">pointsArray1.element(<span class="number">0</span>).<span class="built_in">move</span>(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line">pointsArray1.element(<span class="number">1</span>).<span class="built_in">move</span>(<span class="number">15</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">ArrayOfPoints pointsArray2 = pointsArray1;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Copy of pointsArray1:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Point_0 of array2:"</span>&lt;&lt;pointsArray2.element(<span class="number">0</span>).getX()&lt;&lt;<span class="string">","</span></span><br><span class="line">&lt;&lt;pointsArray2.element(<span class="number">0</span>).getY()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Point_0 of array2:"</span>&lt;&lt;pointsArray2.element(<span class="number">1</span>).getX()&lt;&lt;<span class="string">","</span></span><br><span class="line">&lt;&lt;pointsArray2.element(<span class="number">1</span>).getY()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">pointsArray1.element(<span class="number">0</span>).<span class="built_in">move</span>(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">pointsArray1.element(<span class="number">1</span>).<span class="built_in">move</span>(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"After the moving of pointsArray1:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Point_0 of array2:"</span>&lt;&lt;pointsArray2.element(<span class="number">0</span>).getX()&lt;&lt;<span class="string">","</span></span><br><span class="line">&lt;&lt;pointsArray2.element(<span class="number">0</span>).getY()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Point_0 of array2:"</span>&lt;&lt;pointsArray2.element(<span class="number">1</span>).getX()&lt;&lt;<span class="string">","</span></span><br><span class="line">&lt;&lt;pointsArray2.element(<span class="number">1</span>).getY()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果（2为输入）：</p><p><img src="https://www.zx95.net/images/2020/08/14/imaged233bbef894a8a01.png" alt="imaged233bbef894a8a01.png"></p><p>示意图（教材截图）：</p><p><img src="https://www.zx95.net/images/2020/08/14/image2b4652bcc6ea590e.png" alt="image2b4652bcc6ea590e.png"></p><p>————————————结束啦————————————</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深复制和浅复制&quot;&gt;&lt;a href=&quot;#深复制和浅复制&quot; class=&quot;headerlink&quot; title=&quot;深复制和浅复制&quot;&gt;&lt;/a&gt;深复制和浅复制&lt;/h1&gt;&lt;p&gt;对象的&lt;strong&gt;浅复制&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="C++" scheme="https://dopphu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://dopphu.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Cplusplus指针</title>
    <link href="https://dopphu.github.io/2020/08/14/Cplusplus%E6%8C%87%E9%92%88/"/>
    <id>https://dopphu.github.io/2020/08/14/Cplusplus%E6%8C%87%E9%92%88/</id>
    <published>2020-08-14T07:46:34.499Z</published>
    <updated>2020-08-14T07:41:35.973Z</updated>
    
    <content type="html"><![CDATA[<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p><strong>$</strong> <strong>函数指针</strong></p><p><img src="https://wx2.sbimg.cn/2020/08/11/ov7Y4.png" alt="ov7Y4.png"></p><p>起别名的语法格式就是这样，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*DoubleIntFunction)</span><span class="params">(<span class="keyword">double</span>)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DoubleIntFunction  funcPtr;</span><br></pre></td></tr></table></figure><p>函数指针的赋值：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数指针名 = 函数名;</span><br></pre></td></tr></table></figure><p>等号右边的函数名所指出的必须是一个已经声明过的、和函数指针具有相同返回值类型和相同形参表的函数。在赋值之后，就可以通过函数指针名来直接引用这个指针指向的函数。例如上面的<code>funcPtr</code>函数指针，就可以这样使用（调用）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(*funcPtr)(...实参列表...);</span><br></pre></td></tr></table></figure><h2 id="对象指针"><a href="#对象指针" class="headerlink" title="对象指针"></a>对象指针</h2><p><strong>$</strong> 对象指针就是用于存放对象地址的变量。对象指针遵循一般变量指针的各种规则，声明对象的指针的一般语法形式为：</p><p><code>类名 *对象指针名;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名 *对象指针名;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Point *pointPtr;</span><br><span class="line">Point p1;</span><br><span class="line">pointPtr = &amp;p1;</span><br></pre></td></tr></table></figure><p>使用对象指针访问对象成员的语法形式为：</p><p><code>对象指针名-&gt;成员名;</code></p><p>这种形式与<code>(*对象指针名).成员名</code>的访问形式是等价的。</p><p><strong>$</strong> 再次提一下<a href="https://dopphu.github.io/2020/08/06/Cplusplus%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E/">前向引用声明</a></p><p><img src="https://www.zx95.net/images/2020/08/12/image.png" alt="image.png"></p><h2 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h2><p><img src="https://www.zx95.net/images/2020/08/12/image815d493fca138d1e.png" alt="image815d493fca138d1e.png"></p><p>this 指针是成员函数的一个隐含形参，当成员函数对对象的数据成员进行操作时，就隐含使用了this指针。</p><p><img src="https://www.zx95.net/images/2020/08/12/imageede9b7d0b103067a.png" alt="imageede9b7d0b103067a.png"></p><h2 id="指向类的非静态成员的指针"><a href="#指向类的非静态成员的指针" class="headerlink" title="指向类的非静态成员的指针"></a>指向类的非静态成员的指针</h2><p><strong>$</strong> <strong>指向对象成员的指针</strong>使用前也要先声明，在赋值，然后再引用。因此首先要声明指向该对象所在类的成员函数的指针。声明指针语句的一般形式为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">类型说明符类名::*指针名;<span class="comment">//声明指向数据成员的指针</span></span><br><span class="line">类型说明符   (类名::*指针名)(参数表);  <span class="comment">//声明指向函数成员的指针</span></span><br></pre></td></tr></table></figure><p>声明之后就是赋值，就是要确定指向类的哪一个成员。一般语法形式为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">指针名 = &amp;类名::数据成员名。</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：对类成员取地址时，也要遵循访问权限的约定，也就是说，在一个类的作用域之外不能够对它的私有成员取地址。</p><p><img src="https://www.zx95.net/images/2020/08/12/image1887d1b53c406125.png" alt="image1887d1b53c406125.png"></p><p>成员函数指针在声明之后要用以下形式的语句对其进行赋值：</p><p><code>指针名=&amp;类名::函数成员名;</code></p><p><img src="https://www.zx95.net/images/2020/08/12/imageefb3d4f829bfaea7.png" alt="imageefb3d4f829bfaea7.png"></p><h2 id="指向类的静态成员的指针"><a href="#指向类的静态成员的指针" class="headerlink" title="指向类的静态成员的指针"></a>指向类的静态成员的指针</h2><p><strong>$</strong> 对类的静态成员的访问还是不依赖于对象的，因此可以用普通的指针来指向和访问静态成员。</p><p>静态数据成员，比如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设count是Point类的一个静态数据成员 int型</span></span><br><span class="line"><span class="keyword">int</span> *p = &amp;Point::count;</span><br><span class="line"><span class="comment">//访问</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Object count="</span>&lt;&lt;*p&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>静态函数成员，例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Point(<span class="keyword">int</span> x=<span class="number">0</span>, <span class="keyword">int</span> y=<span class="number">0</span>):x(x), y(y)&#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">Point(<span class="keyword">const</span> Point &amp;p):x(p.x), y(p.y)&#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">~Point()&#123;</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span><span class="keyword">const</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span><span class="keyword">const</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showCount</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"  Object count="</span>&lt;&lt;count&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Point::count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">void</span> (*funcPtr)() = Point::showCount;</span><br><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">a</span><span class="params">(<span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Point A:"</span>&lt;&lt;a.getX()&lt;&lt;<span class="string">","</span>&lt;&lt;a.getY()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">funcPtr();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;指针&quot;&gt;&lt;a href=&quot;#指针&quot; class=&quot;headerlink&quot; title=&quot;指针&quot;&gt;&lt;/a&gt;指针&lt;/h1&gt;&lt;h2 id=&quot;函数指针&quot;&gt;&lt;a href=&quot;#函数指针&quot; class=&quot;headerlink&quot; title=&quot;函数指针&quot;&gt;&lt;/a&gt;函数指针&lt;/h
      
    
    </summary>
    
    
      <category term="C++" scheme="https://dopphu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://dopphu.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++string类初步</title>
    <link href="https://dopphu.github.io/2020/08/14/C++string%E7%B1%BB%E5%88%9D%E6%AD%A5/"/>
    <id>https://dopphu.github.io/2020/08/14/C++string%E7%B1%BB%E5%88%9D%E6%AD%A5/</id>
    <published>2020-08-14T07:46:34.479Z</published>
    <updated>2020-08-14T07:46:19.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-string类"><a href="#C-string类" class="headerlink" title="C++string类"></a>C++string类</h1><p>使用数组来存放字符串，调用系统函数来处理字符串，毕竟显得不方便，而且数据与处理数据的函数分离也不符合面向对象方法的要求。为此，C++标准库将面对对象的串的概念加入到C++语言中，预定义了字符串类（<code>string</code>类）。string类提供了对字符串进行处理所需要的的操作。使用<code>string</code>类需要包含头文件string。<code>string</code>类封装了串的属性并提供了一系列允许访问这些属性的函数。</p><p><strong>细节</strong>：严格的说，<code>string</code>并非一个独立的类，而是<strong>类模板</strong><code>basic_string</code>的一个特化实例。不过对于<code>string</code>的使用者来说，它的特点与一个类无异，因此可以把它当做一个类来看待。</p><h2 id="构造函数原型"><a href="#构造函数原型" class="headerlink" title="构造函数原型"></a>构造函数原型</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span>();<span class="comment">//默认构造函数，建立一个长度为0的串</span></span><br><span class="line"><span class="built_in">string</span>(<span class="keyword">const</span> <span class="built_in">string</span> &amp;rhs);<span class="comment">//复制构造函数</span></span><br><span class="line"><span class="built_in">string</span>(<span class="keyword">const</span> <span class="keyword">char</span> *s);<span class="comment">//用指针s所指向的字符常量来初始化string类的对象</span></span><br><span class="line"><span class="built_in">string</span>(<span class="keyword">const</span> <span class="built_in">string</span>&amp; rhs, <span class="keyword">unsigned</span> <span class="keyword">int</span> pos, <span class="keyword">unsigned</span> <span class="keyword">int</span> n);</span><br><span class="line"><span class="comment">//将对象rhs的串从位置pos开始取n个字符，初始化string类的对象</span></span><br><span class="line"><span class="comment">//注：串中的第一个字符的位置为0</span></span><br><span class="line"><span class="built_in">string</span>(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">unsigned</span> <span class="keyword">int</span> n);</span><br><span class="line"><span class="comment">//用指针s所指向的字符串中的前n个字符初始化string类的对象</span></span><br><span class="line"><span class="built_in">string</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> n, <span class="keyword">char</span> c);</span><br><span class="line"><span class="comment">//将参数c中的字符重复n次，用来初始化string类的对象</span></span><br></pre></td></tr></table></figure><p><strong>提示</strong>：由于<code>string</code>类是具有接收<code>const char *</code>类型的构造函数，因此字符串常量和用字符数组表示的字符串变量都可以隐含地转化为<code>string</code>对象。例如，可以直接使用字符串常量对<code>string</code>对象初始化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str = <span class="string">"Hello world!"</span>;</span><br></pre></td></tr></table></figure><p><img src="https://www.zx95.net/images/2020/08/14/imagefb5fd25f84ec5143.png" alt="imagefb5fd25f84ec5143.png"></p><p><img src="https://www.zx95.net/images/2020/08/14/imagefc2dbde0ee4fce9e.png" alt="imagefc2dbde0ee4fce9e.png"></p><p><img src="https://www.zx95.net/images/2020/08/14/image3a8ec912d2f78483.png" alt="image3a8ec912d2f78483.png"></p><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据value的值输出true和false，title为 提示文字</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * title, <span class="keyword">bool</span> value)</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;title&lt;&lt;<span class="string">" returns "</span>&lt;&lt;(value?<span class="string">"true"</span>:<span class="string">"false"</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s1 = <span class="string">"DEF"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"s1 is "</span>&lt;&lt;s1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s2;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Please enter s2:"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s2;<span class="comment">//这种输入方式会以空格为分割符，例如：123 def 则只读取123，def将会在下一次从键盘输入字符时被读取 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"length of s2:"</span>&lt;&lt;s2.length()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较运算符的测试</span></span><br><span class="line">test(<span class="string">"s1&lt;\"ABC\""</span>, s1&lt;=<span class="string">"ABC"</span>);</span><br><span class="line">test(<span class="string">"\"DEF\"&lt;=s1"</span>, <span class="string">"DEF"</span>&lt;=s1);</span><br><span class="line"></span><br><span class="line">s2 += s1;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"s2=s2+s1:"</span>&lt;&lt;s2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"length of s2:"</span>&lt;&lt;s2.length()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.zx95.net/images/2020/08/14/image8ac542ca8d1cd00c.png" alt="image8ac542ca8d1cd00c.png"></p><p><strong>$</strong> 用<code>getline</code>输入字符串</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">2</span>; i++)&#123;</span><br><span class="line"><span class="built_in">string</span> city, state;</span><br><span class="line">getline(<span class="built_in">cin</span>, city, <span class="string">','</span>);</span><br><span class="line">getline(<span class="built_in">cin</span>, state);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"City: "</span>&lt;&lt;city&lt;&lt;<span class="string">"   State:"</span>&lt;&lt;state&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-string类&quot;&gt;&lt;a href=&quot;#C-string类&quot; class=&quot;headerlink&quot; title=&quot;C++string类&quot;&gt;&lt;/a&gt;C++string类&lt;/h1&gt;&lt;p&gt;使用数组来存放字符串，调用系统函数来处理字符串，毕竟显得不方便，而且数据与处理数
      
    
    </summary>
    
    
      <category term="C++" scheme="https://dopphu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://dopphu.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>2022考研规划</title>
    <link href="https://dopphu.github.io/2020/08/11/2022%E8%80%83%E7%A0%94%E8%A7%84%E5%88%92/"/>
    <id>https://dopphu.github.io/2020/08/11/2022%E8%80%83%E7%A0%94%E8%A7%84%E5%88%92/</id>
    <published>2020-08-11T12:58:52.363Z</published>
    <updated>2020-08-12T03:22:19.343Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1Ai4y1G72m" target="_blank" rel="noopener">2022考研必上第一课规划课-刘晓艳老师团队规划师冯浩</a></p><p><img src="https://wx2.sbimg.cn/2020/08/11/oUQzA.png" alt="oUQzA.png"></p><p><img src="https://wx1.sbimg.cn/2020/08/11/oUArV.png" alt="oUArV.png"></p><p><img src="https://wx2.sbimg.cn/2020/08/11/oURD7.png" alt="oURD7.png"></p><p>中国从来都不缺六点起十点回寝室的人。</p><p><img src="https://wx1.sbimg.cn/2020/08/11/oUdxO.png" alt="oUdxO.png"></p><h1 id="考研百科"><a href="#考研百科" class="headerlink" title="考研百科"></a>考研百科</h1><p>考研：全国硕士研究生统一招生考试</p><p>高考：普通高等学校招生全国统一考试</p><p><img src="https://wx2.sbimg.cn/2020/08/11/oUhme.png" alt="oUhme.png"></p><p>考研只能一个学校一个专业。</p><p>正在学习，突发事件的影响（突然来个语音），为了避免要考虑<strong>协调</strong>。→规划</p><p>考研年份的确定是看录取时间，而不是考试时间</p><p>考研的两个阶段：初试，复试。初试由国家统一组织，复试由招生单位自行组织。</p><table><thead><tr><th align="center">类别/阶段</th><th align="center">初试</th><th align="center">复试</th></tr></thead><tbody><tr><td align="center">组织方</td><td align="center">国家统一组织</td><td align="center">招生单位组织</td></tr><tr><td align="center">考查方式</td><td align="center">笔试</td><td align="center">笔试＋面试</td></tr><tr><td align="center">时间</td><td align="center">12月</td><td align="center">3-4月</td></tr></tbody></table><h2 id="初试方式分类"><a href="#初试方式分类" class="headerlink" title="初试方式分类"></a>初试方式分类</h2><p><img src="https://www.zx95.net/images/2020/08/11/image7fa449c5181cc431.png" alt="image7fa449c5181cc431.png"></p><p>成绩好推荐免试，单独考试和我们没有关系。</p><h2 id="考研初试考试科目"><a href="#考研初试考试科目" class="headerlink" title="考研初试考试科目"></a>考研初试考试科目</h2><p><img src="https://www.zx95.net/images/2020/08/11/image1f02d92cb5e94097.png" alt="image1f02d92cb5e94097.png"></p><p><img src="https://www.zx95.net/images/2020/08/11/image30cf348baf04c96e.png" alt="image30cf348baf04c96e.png"></p><h2 id="那么我考什么？搜索引擎进行搜索"><a href="#那么我考什么？搜索引擎进行搜索" class="headerlink" title="那么我考什么？搜索引擎进行搜索"></a>那么我考什么？搜索引擎进行搜索</h2><p><img src="https://www.zx95.net/images/2020/08/11/image09aed7fffd13740e.png" alt="image09aed7fffd13740e.png"></p><p><img src="https://www.zx95.net/images/2020/08/11/image0ed837e423a90c2c.png" alt="image0ed837e423a90c2c.png"></p><p><strong>最新招生目录为准！！！！！</strong></p><p><img src="https://www.zx95.net/images/2020/08/11/image180e6bbdf87d3ca8.png" alt="image180e6bbdf87d3ca8.png"></p><p>数学是专业课一（考两天那个）。</p><p><img src="https://www.zx95.net/images/2020/08/11/image909a69950fb53a7c.png" alt="image909a69950fb53a7c.png"></p><p><img src="https://www.zx95.net/images/2020/08/11/image693cab42f6bfec3a.png" alt="image693cab42f6bfec3a.png"></p><p><img src="https://www.zx95.net/images/2020/08/11/image00c44fb38458afcd.png" alt="image00c44fb38458afcd.png"></p><p>是<strong>学力</strong>不是学历</p><p><img src="https://www.zx95.net/images/2020/08/11/imageb811f737598f0b60.png" alt="imageb811f737598f0b60.png"></p><p><img src="https://www.zx95.net/images/2020/08/11/image07ba8596676fab69.png" alt="image07ba8596676fab69.png"></p><p><img src="https://www.zx95.net/images/2020/08/11/imagef4acc5da1f3fd40a.png" alt="imagef4acc5da1f3fd40a.png"></p><p>两个重要文件——<strong>招生简章</strong>和<strong>招生目录</strong></p><p><img src="https://www.zx95.net/images/2020/08/11/imagea2249b01eb133b5a.png" alt="imagea2249b01eb133b5a.png"></p><p>有的不招同等学力，有的招但是有限制</p><p><img src="https://www.zx95.net/images/2020/08/11/image3e7e91d7d9ebb98c.png" alt="image3e7e91d7d9ebb98c.png"></p><p><img src="https://www.zx95.net/images/2020/08/11/image739410c9c81332a1.png" alt="image739410c9c81332a1.png"></p><p>同等学历要打电话问学校是否符合标准，要有证明。</p><p>学医的专升本会有些不同</p><p>看政策：</p><p><img src="https://www.zx95.net/images/2020/08/11/image99dd594a1cd93127.png" alt="image99dd594a1cd93127.png"></p><p><img src="https://www.zx95.net/images/2020/08/11/image60cc48bda1a9e36a.png" alt="image60cc48bda1a9e36a.png"></p><p><a href="https://yz.chsi.com.cn/" target="_blank" rel="noopener">中国研究生招生信息网</a></p><p><img src="https://www.zx95.net/images/2020/08/11/imagefb4f4c3d27255fda.png" alt="imagefb4f4c3d27255fda.png"></p><p><strong>一科不过全军覆没</strong></p><p>34所自主划线高校</p><p><img src="https://www.zx95.net/images/2020/08/11/imagead0561c53635800e.png" alt="imagead0561c53635800e.png"></p><p>录取最低分。</p><h1 id="考研政策"><a href="#考研政策" class="headerlink" title="考研政策"></a>考研政策</h1><p>要注意有些专业是否不再招生，（比如违规招生，可能就不招了）</p><p><img src="https://www.zx95.net/images/2020/08/11/imaged8c32208c5ed75f8.png" alt="imaged8c32208c5ed75f8.png"></p><p><img src="https://www.zx95.net/images/2020/08/11/image1d3d369a5d4191fa.png" alt="image1d3d369a5d4191fa.png"></p><p><img src="https://www.zx95.net/images/2020/08/11/image12145e19a1abbad9.png" alt="image12145e19a1abbad9.png"></p><p><img src="https://www.zx95.net/images/2020/08/11/image1c31dc59fe60f744.png" alt="image1c31dc59fe60f744.png"></p><p><img src="https://www.zx95.net/images/2020/08/11/imageaea8fe35790db1f0.png" alt="imageaea8fe35790db1f0.png"></p><p><img src="https://www.zx95.net/images/2020/08/12/image-20200811205218297.png" alt="image-20200811205218297.png"></p><p>关注你想考学校的微信公众号和微博</p><p><img src="https://www.zx95.net/images/2020/08/11/image96d07e51f8a5ca9f.png" alt="image96d07e51f8a5ca9f.png"></p><p>标黄的和22年考研的没有关系，那是学长学姐的事儿。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1Ai4y1G72m&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2022考研必上第一课规划课-刘晓艳老师团队规划师冯浩&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;htt
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>友元</title>
    <link href="https://dopphu.github.io/2020/08/10/%E5%8F%8B%E5%85%83/"/>
    <id>https://dopphu.github.io/2020/08/10/%E5%8F%8B%E5%85%83/</id>
    <published>2020-08-10T12:16:51.323Z</published>
    <updated>2020-08-10T12:14:31.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h1><h2 id="友元-1"><a href="#友元-1" class="headerlink" title="友元"></a>友元</h2><p><strong>$</strong> <strong>友元关系提供了不同类或对象的成员函数之间、类的成员函数与一般函数之间进行数据共享的机制。</strong>通俗来说就是，友元关系就是一个类主动声明哪些其他类或函数时它的朋友，进而给它们提供对本类的访问特许。</p><h2 id="友元函数和友元类"><a href="#友元函数和友元类" class="headerlink" title="友元函数和友元类"></a>友元函数和友元类</h2><p>声明形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    ...</span><br><span class="line">        <span class="function"><span class="keyword">friend</span> <span class="keyword">int</span> <span class="title">somefunc</span><span class="params">(...)</span></span>;<span class="comment">//友元函数声明</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span>;</span><span class="comment">//声明A为SomeClass的友元类</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>友元函数不仅可以是一个普通函数，也可以是另外一个类的成员函数。友元成员函数的使用和一般友元函数的使用基本相同，只是要通过相应的类或对象名来访问。</p><p>关于友元还有几点注意：</p><p><strong>1.友元关系是不能传递的</strong></p><p><strong>2.友元关系是单向的</strong></p><p><strong>3.友元关系是不被继承的</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;友元&quot;&gt;&lt;a href=&quot;#友元&quot; class=&quot;headerlink&quot; title=&quot;友元&quot;&gt;&lt;/a&gt;友元&lt;/h1&gt;&lt;h2 id=&quot;友元-1&quot;&gt;&lt;a href=&quot;#友元-1&quot; class=&quot;headerlink&quot; title=&quot;友元&quot;&gt;&lt;/a&gt;友元&lt;/h2&gt;&lt;p
      
    
    </summary>
    
    
      <category term="C++" scheme="https://dopphu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://dopphu.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>外部变量和外部函数</title>
    <link href="https://dopphu.github.io/2020/08/10/%E5%A4%96%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%A4%96%E9%83%A8%E5%87%BD%E6%95%B0/"/>
    <id>https://dopphu.github.io/2020/08/10/%E5%A4%96%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E5%A4%96%E9%83%A8%E5%87%BD%E6%95%B0/</id>
    <published>2020-08-10T12:16:51.322Z</published>
    <updated>2020-08-10T12:13:44.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="外部变量"><a href="#外部变量" class="headerlink" title="外部变量"></a>外部变量</h1><p>如果一个变量除了在定义它的源文件中可以使用外，还能被其他文件使用，那么就称这个变量是外部变量。命名空间作用域中定义的变量，默认情况下都是外部变量，但在其它文件中如果要使用这一变量，需要用<code>extern</code>关键字加以说明。</p><p>例子：</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200810171423414.png" alt="image-20200810171423414"></p><p>外部变量是可以被多个源文件所共享的全局变量。</p><h1 id="外部函数"><a href="#外部函数" class="headerlink" title="外部函数"></a>外部函数</h1><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200810171717331.png" alt="image-20200810171717331"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;外部变量&quot;&gt;&lt;a href=&quot;#外部变量&quot; class=&quot;headerlink&quot; title=&quot;外部变量&quot;&gt;&lt;/a&gt;外部变量&lt;/h1&gt;&lt;p&gt;如果一个变量除了在定义它的源文件中可以使用外，还能被其他文件使用，那么就称这个变量是外部变量。命名空间作用域中定义的变量，默
      
    
    </summary>
    
    
      <category term="C++" scheme="https://dopphu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://dopphu.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>对象的生存周期</title>
    <link href="https://dopphu.github.io/2020/08/10/%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%AD%98%E5%91%A8%E6%9C%9F/"/>
    <id>https://dopphu.github.io/2020/08/10/%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%94%9F%E5%AD%98%E5%91%A8%E6%9C%9F/</id>
    <published>2020-08-10T12:16:51.302Z</published>
    <updated>2020-08-10T12:11:46.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象的生存周期"><a href="#对象的生存周期" class="headerlink" title="对象的生存周期"></a>对象的生存周期</h1><h2 id="静态生存期"><a href="#静态生存期" class="headerlink" title="静态生存期"></a>静态生存期</h2><p><strong>如果对象的生存期与程序的运行期相同，则称它具有静态生存期。</strong>在命名空间声明的对象都是具有静态生存期的。如果要在函数内部的局部作用域中声明具有静态生存期的对象，则要使用关键字static。例如下列语句定义的变量i便是具有静态生存期的变量：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> i;</span><br></pre></td></tr></table></figure><p>局部作用域中静态变量的特点是，它并不会随着每次函数调用而产生一个副本，也不会随着函数返回而失效。也就是说当函数返回后，下一次调用时，该变量还会保留上一次的值，即使发生了递归调用也不会为该变量建立新的副本，该变量会在每次调用间共享。</p><p>在定义静态变量的同时也可为它赋初值，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>这表示i会被赋予5初始化，而非每次执行函数时都将i赋值为5。</p><p><strong>细节</strong>：<em>定义时未指定初值的基本类型静态生存期变量会被赋予0值初始化，而对于动态生存期变量，不指定初值则意味着初值不确定</em>。</p><h2 id="动态生存期"><a href="#动态生存期" class="headerlink" title="动态生存期"></a>动态生存期</h2><p>除了上述两种情况（命名空间和static关键字）</p><p><strong>局部生存期对象诞生于声明点，结束语声明所在的块执行完毕之时。</strong></p><p><strong>提示</strong>：类的成员对象也有各自的生存期。不用static修饰的成员对象，其生存期与它们所属对象的生存期保持一致。</p><p>一个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span>&#123;</span><span class="comment">//时钟类定义 </span></span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//外部接口 </span></span><br><span class="line">Clock():newH(<span class="number">0</span>), newM(<span class="number">0</span>), newS(<span class="number">0</span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showTime</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;newH&lt;&lt;<span class="string">":"</span>&lt;&lt;newM&lt;&lt;<span class="string">":"</span>&lt;&lt;newS&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTime</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> m, <span class="keyword">int</span> s)</span></span>&#123; <span class="comment">//三个形参均具有局部作用域 </span></span><br><span class="line">newH = h;</span><br><span class="line">newM = m;</span><br><span class="line">newS = s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> newH, newM, newS; </span><br><span class="line">&#125;; </span><br><span class="line">Clock globalClock;<span class="comment">//具有命名空间作用域，静态生存期 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;<span class="comment">//主函数 </span></span><br><span class="line">globalClock.showTime();</span><br><span class="line">globalClock.setTime(<span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">globalClock.showTime();</span><br><span class="line"></span><br><span class="line"><span class="function">Clock <span class="title">myClock</span><span class="params">(globalClock)</span></span>;<span class="comment">//声明具有块作用域的对象myClock </span></span><br><span class="line">myClock.showTime();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://wx2.sbimg.cn/2020/08/10/o7eA7.png" alt="o7eA7.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对象的生存周期&quot;&gt;&lt;a href=&quot;#对象的生存周期&quot; class=&quot;headerlink&quot; title=&quot;对象的生存周期&quot;&gt;&lt;/a&gt;对象的生存周期&lt;/h1&gt;&lt;h2 id=&quot;静态生存期&quot;&gt;&lt;a href=&quot;#静态生存期&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="C++" scheme="https://dopphu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://dopphu.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>常字打头</title>
    <link href="https://dopphu.github.io/2020/08/10/%E5%B8%B8%E5%AF%B9%E8%B1%A1/"/>
    <id>https://dopphu.github.io/2020/08/10/%E5%B8%B8%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-08-10T12:16:51.300Z</published>
    <updated>2020-08-11T03:22:11.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常对象"><a href="#常对象" class="headerlink" title="常对象"></a>常对象</h2><h2 id="常成员函数"><a href="#常成员函数" class="headerlink" title="常成员函数"></a>常成员函数</h2><h2 id="常数据成员"><a href="#常数据成员" class="headerlink" title="常数据成员"></a>常数据成员</h2><p>全都是声明时，加一个<code>const</code>关键字就可。一句话：不能赋值，只能并且必须初始化。</p><p>在数据成员类型前加一个 <code>mutable</code> 在常成员函数中就可以修改了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">mutable</span> <span class="keyword">double</span> len;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="常引用"><a href="#常引用" class="headerlink" title="常引用"></a>常引用</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> 类型说明符 &amp;引用名</span><br></pre></td></tr></table></figure><p>按常引用传递参数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常对象&quot;&gt;&lt;a href=&quot;#常对象&quot; class=&quot;headerlink&quot; title=&quot;常对象&quot;&gt;&lt;/a&gt;常对象&lt;/h2&gt;&lt;h2 id=&quot;常成员函数&quot;&gt;&lt;a href=&quot;#常成员函数&quot; class=&quot;headerlink&quot; title=&quot;常成员函数&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="C++" scheme="https://dopphu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://dopphu.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>标识符在作用域和可见性是一回事吗？有了初步了解</title>
    <link href="https://dopphu.github.io/2020/08/10/%E6%A0%87%E8%AF%86%E7%AC%A6%E5%9C%A8%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%8F%AF%E8%A7%81%E6%80%A7%E6%98%AF%E4%B8%80%E5%9B%9E%E4%BA%8B%E5%90%97%EF%BC%9F%E6%9C%89%E4%BA%86%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3/"/>
    <id>https://dopphu.github.io/2020/08/10/%E6%A0%87%E8%AF%86%E7%AC%A6%E5%9C%A8%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%8F%AF%E8%A7%81%E6%80%A7%E6%98%AF%E4%B8%80%E5%9B%9E%E4%BA%8B%E5%90%97%EF%BC%9F%E6%9C%89%E4%BA%86%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3/</id>
    <published>2020-08-10T12:16:51.299Z</published>
    <updated>2020-08-10T12:16:21.835Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标识符在作用域和可见性是一回事吗？有了初步了解"><a href="#标识符在作用域和可见性是一回事吗？有了初步了解" class="headerlink" title="标识符在作用域和可见性是一回事吗？有了初步了解"></a>标识符在作用域和可见性是一回事吗？有了初步了解</h2><p><strong>$</strong> <strong>作用域</strong>：作用域是一个标识符在程序正文中有效的区域。</p><ol><li><p>函数原型作用域</p><p>​    函数原型作用域是C++程序中最小的作用域。在函数原型中一定要包含形参的类型说明。<strong>在函数原型声明时形式参数的作用范围就是函数原型的作用域。</strong>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">(<span class="keyword">double</span> radius)</span></span>;</span><br></pre></td></tr></table></figure><p>标识符radius的作用（或称有效）范围就在函数area形参列表的左右括号之间，在程序的其他地方不能引用这个标识符。因此标识符radius的作用域称为<strong>函数原型作用域</strong>。</p><p><em>me</em>：你可能会好奇，radius不是形参吗？在函数体里面不是可用吗？其实这里只是一个函数原型的形参列表，而不是函数实现的形参列表，当有函数实现的时候，函数体中就是下面要讲的局部作用域了。</p><p><strong>注意</strong>：由于函数原型的形参列表起作用的只是形参类型，标识符并不起作用，因此使允许省去的。但考虑到程序的可读性，通常还是要在函数原型声明时，给出形参标识符。</p></li><li><p>局部作用域（纯抄书，感觉解释很到位）</p><p>​    为了理解局部作用域，先来看一个例子。</p><p>​    <img src="https://wx2.sbimg.cn/2020/08/09/oqgKe.png" alt="oqgKe.png"></p><p>​    <strong>函数形参列表中形参的作用域，从形参的列表的声明处开始，到整个函数体结束之处为止。</strong>因此，形参a的作用域从a的声明处开始，到fun函数的结束处为止。<strong>函数体内声明的变量，其作用域从声明处开始，一直到声明所在的块结束的大括号为止。</strong>所谓块，就是一对大括号括起来的一段程序。例如函数体就是一个块，if后面的分支体又是一个较小的块。<strong>具有局部作用域的变量也称为局部变量。</strong></p></li><li><p>类作用域</p><p>​    类可以被看作一组有名成员的集合，类X的成员m具有类作用域，<strong>对m的访问方式有如下3种</strong>：</p><p>(1) <strong>如果在X的成员函数中没有声明同名的局部作用域标识符，那么在该函数内可以直接访问成员m</strong>。也就是说m在这样的函数中都起作用。</p><p>(2) <strong>通过表达式<code>x.m</code>或<code>X::m</code>。这正是程序中访问对象成员的最基本方法。<code>X::m</code>的方式用于访问类的静态成员。</strong><a href="https://dopphu.github.io/2020/08/10/%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E6%88%90%E5%91%98/#more">关于类的静态成员</a></p><p>(3) <strong>通过<code>ptr-&gt;m</code>这样的表达式，其中<code>ptr</code>为指向一个 X 类的一个对象的指针。</strong></p></li><li><p>命名空间作用域</p><p>​    教材截图：</p><p><img src="https://wx2.sbimg.cn/2020/08/09/oqjbk.png" alt="oqjbk.png"></p><ol><li><p>命名空间的语法形式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> 命名空间名 &#123;</span><br><span class="line">    命名空间的各种声明(函数声明、类声明、...)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个命名空间确定了一个命名空间作用域，<strong>凡是在该命名空间之内声明的、不属于前面所述各个作用域的标识符，都属于该命名空间作用域</strong>。在命名空间内部可以直接引用当前命名空间中声明的标识符，如果需要引用其他命名空间的标识符，则需要使用下面的语法：</p><p><code>命名空间名::标识符名</code></p><p>例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> SomeNs&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>&#123;</span>...&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//这样引用</span></span><br><span class="line">SomeNs::SomeClass obj1;</span><br></pre></td></tr></table></figure><p>有时，标识符前面总使用这样的命名空间限定会显得过于冗长，C++提供了using语句来解决，using语句有两种形式：</p><p><code>using 命名空间名::标识符名;</code>//暴露指定标识符</p><p><code>using namespace 命名空间名;</code>//暴露该命名空间所有标识符</p><p>事实上，C++标准库的所有标识符都被声明在std命名空间内，前面用到的<code>cin</code>、<code>cout</code>、<code>endl</code>等标识符皆是如此，因此，前面的程序都使用了<code>using namespace std;</code>。如果去掉这条语句，则引用相应的标识符需要使用<code>std::cin</code>、<code>std::cout</code>、<code>std::endl</code>这样的语法。</p><p><strong>命名空间也允许嵌套</strong>，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> OuterNs&#123;</span><br><span class="line">    <span class="keyword">namespace</span> InnerNs&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>&#123;</span>...&#125;;<span class="comment">//类声明</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，两类特殊的命名空间：全局命名空间和匿名命名空间。全局命名空间是默认的命名空间，在显示声明的命名空间之外声明的标识符都在一个全局命名空间，声明方式如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    匿名命名空间内的各种声明&#123;函数声明、类声明、...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在包含多个源文件的工程中，<strong>匿名命名空间常常被用来屏蔽不希望暴露给其他源文件的标识符</strong>，这是因为每个源文件的匿名命名空间是彼此不同的，在一个源文件中没有办法访问其他文件的匿名命名空间。</p></li><li><p><strong>具有命名空间作用域的变量也称为全局变量。</strong></p></li></ol></li><li><p>可见性：</p><p>​    命名空间作用域 &gt; 类作用域 &gt; 局部作用域</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;标识符在作用域和可见性是一回事吗？有了初步了解&quot;&gt;&lt;a href=&quot;#标识符在作用域和可见性是一回事吗？有了初步了解&quot; class=&quot;headerlink&quot; title=&quot;标识符在作用域和可见性是一回事吗？有了初步了解&quot;&gt;&lt;/a&gt;标识符在作用域和可见性是一回事吗？
      
    
    </summary>
    
    
      <category term="C++" scheme="https://dopphu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://dopphu.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>类的静态成员</title>
    <link href="https://dopphu.github.io/2020/08/10/%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E6%88%90%E5%91%98/"/>
    <id>https://dopphu.github.io/2020/08/10/%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E6%88%90%E5%91%98/</id>
    <published>2020-08-10T12:12:38.981Z</published>
    <updated>2020-08-10T12:12:24.741Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类的静态成员"><a href="#类的静态成员" class="headerlink" title="类的静态成员"></a>类的静态成员</h1><h2 id="静态数据成员"><a href="#静态数据成员" class="headerlink" title="静态数据成员"></a>静态数据成员</h2><p>教材截图：</p><p><img src="https://wx1.sbimg.cn/2020/08/10/o7tH6.png" alt="o7tH6.png"></p><p><strong>$</strong> <strong>静态数据成员具有静态生存期。</strong>由于静态数据成员不属于任何一个对象可以通过类名进行访问，一般的用法是<code>类名::标识符</code>。在类的定义中仅仅对静态数据成员进行引用性声明，必须在命名空间作用域的某个地方使用类名限定定义性声明，这时也可以进行初始化。例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//09类的静态数据成员 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Point(<span class="keyword">int</span> x=<span class="number">0</span>, <span class="keyword">int</span> y=<span class="number">0</span>):x(x), y(y)&#123;</span><br><span class="line">            <span class="comment">//在构造函数中对count进行累加，所有对象共同维护同一个count</span></span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">Point(Point &amp;p)&#123;</span><br><span class="line">x = p.x;</span><br><span class="line">y = p.y;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">~Point()&#123;</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showCount</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Point::showCount</span><span class="params">()</span></span>&#123;<span class="comment">//输出静态数据成员</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Object count = "</span>&lt;&lt;count&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Point::count = <span class="number">0</span>;<span class="comment">//静态数据成员定义和初始化，使用类名限定</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">a</span><span class="params">(<span class="number">4</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line">a.showCount();</span><br><span class="line"></span><br><span class="line">    <span class="function">Point <span class="title">b</span><span class="params">(a)</span></span>;</span><br><span class="line">b.showCount();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可是没有创建对象时，想要知道count的值怎么办？这就看静态成员函数了。</p><h2 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h2><p><strong>$</strong> 静态成员函数可以直接访问该类的静态数据和函数成员。而访问非静态成员，必须通过对象名。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">...</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showCount</span><span class="params">()</span></span>;<span class="comment">//非静态成员函数</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">&#125;; </span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">Point::showCount();<span class="comment">//这是错误的,对于普通函数成员的调用必须通过对象名。</span></span><br><span class="line">    ...  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再请看</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(A a)</span></span>;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A::f</span><span class="params">(A a)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;x;<span class="comment">//对x的引用是错误的</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a.x;<span class="comment">//正确</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，通过静态成员访问非静态成员是相当麻烦的，一般情况下，它主要用来访问同一个类中的静态数据成员，维护对象之间共享的数据。</p><p><img src="https://wx1.sbimg.cn/2020/08/10/o7bNG.png" alt="o7bNG.png"></p><p><img src="https://wx2.sbimg.cn/2020/08/10/o7rkT.png" alt="o7rkT.png"></p><p>下面是一个完整的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//09类的静态数据成员 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Point(<span class="keyword">int</span> x=<span class="number">0</span>, <span class="keyword">int</span> y=<span class="number">0</span>):x(x), y(y)&#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">Point(Point &amp;p)&#123;</span><br><span class="line">x = p.x;</span><br><span class="line">y = p.y;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">~Point()&#123;</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showCount</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> count;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Point::showCount</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Object count = "</span>&lt;&lt;count&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Point::count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Point::showCount();<span class="comment">//不依赖任何对象，直接访问静态数据</span></span><br><span class="line"><span class="function">Point <span class="title">a</span><span class="params">(<span class="number">4</span>, <span class="number">5</span>)</span></span>;</span><br><span class="line">a.showCount();</span><br><span class="line"><span class="function">Point <span class="title">b</span><span class="params">(a)</span></span>;</span><br><span class="line">Point::showCount();</span><br><span class="line">b.showCount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://wx1.sbimg.cn/2020/08/10/o7Osw.png" alt="o7Osw.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类的静态成员&quot;&gt;&lt;a href=&quot;#类的静态成员&quot; class=&quot;headerlink&quot; title=&quot;类的静态成员&quot;&gt;&lt;/a&gt;类的静态成员&lt;/h1&gt;&lt;h2 id=&quot;静态数据成员&quot;&gt;&lt;a href=&quot;#静态数据成员&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="C++" scheme="https://dopphu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://dopphu.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Cplusplus类的组合</title>
    <link href="https://dopphu.github.io/2020/08/06/Cplusplus%E7%B1%BB%E7%9A%84%E7%BB%84%E5%90%88/"/>
    <id>https://dopphu.github.io/2020/08/06/Cplusplus%E7%B1%BB%E7%9A%84%E7%BB%84%E5%90%88/</id>
    <published>2020-08-06T09:25:00.000Z</published>
    <updated>2020-08-06T09:25:56.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类的组合"><a href="#类的组合" class="headerlink" title="类的组合"></a>类的组合</h1><p>$ <strong>类的组合描述的就是一个类内嵌其它类的对象作为成员的情况，它们之间是一种包含与被包含的关系。</strong>例如，用一个类来描述计算机系统，首先可以把它分解为硬件和软件，而硬件包含…，软件又包含…，这些部分每一个都能进行进一步的分解，用类的观点来描述，它就是一个类的组合。</p><p><img src="https://wx1.sbimg.cn/2020/08/05/oD61o.png" alt="oD61o.png"></p><p><strong>$</strong> <strong>当创建类的对象时，如果这个类具有内嵌对象成员，那么各个内嵌对象将首先被自动创建。</strong>因为部件对象是复杂对象的一部分，因此，<strong>在创建对象时既要对本类的基本类型数据成员进行初始化，又要对内嵌对象成员进行初始化。</strong>这时，理解这些对象的构造函数被调用的顺序就很重要。</p><p><img src="https://wx2.sbimg.cn/2020/08/05/oDg7U.png" alt="oDg7U.png"></p><p><strong>$</strong> 那么当存在类的组合关系时，复制构造函数该如何编写呢？同样，没有编写的话，编译系统会在必要时自动生成一个隐含的复制构造函数，这个隐含的函数会自动调用内嵌对象的复制构造函数，为各个内嵌对象初始化。</p><p>自己编写的话，举个例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设C类中包含B类的对象b作为成员，C类的复制构造函数形式如下：</span></span><br><span class="line">C::C(C &amp;c1):b(c1.b)&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>$</strong> 用一个例子来理解一下复制构造函数，构造函数的调用顺序吧。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Point(<span class="keyword">int</span> xx = <span class="number">0</span>, <span class="keyword">int</span> yy = <span class="number">0</span>)&#123;</span><br><span class="line">x = xx;</span><br><span class="line">y = yy;</span><br><span class="line">&#125;</span><br><span class="line">Point(Point &amp;p);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line">Point::Point(Point &amp;p)&#123;<span class="comment">//复制构造函数的实现 </span></span><br><span class="line">x = p.x;</span><br><span class="line">y = p.y;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Calling the copy constructor of Point"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//类的组合</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Line</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Line(Point xp1, Point xp2);</span><br><span class="line">Line(Line &amp;l);</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getLen</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Point p1, p2;</span><br><span class="line"><span class="keyword">double</span> len;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="comment">//组合类的构造函数</span></span><br><span class="line">Line::Line(Point xp1, Point xp2):p1(xp1), p2(xp2)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Calling constructor of Line"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//static_cast&lt;double&gt;(...)强制类型转换 </span></span><br><span class="line"><span class="keyword">double</span> x = <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(p1.getX() - p2.getX());</span><br><span class="line"><span class="keyword">double</span> y = <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(p1.getY() - p2.getY());</span><br><span class="line">len = <span class="built_in">sqrt</span>(x*x + y*y); </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//组合类的复制构造函数</span></span><br><span class="line">Line::Line(Line &amp;l):p1(l.p1), p2(l.p2)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Calling the copy constructor of Line"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">len = l.len;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//主函数 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Point myp1(1, 1), myp2(4, 5);</span><br><span class="line"></span><br><span class="line"><span class="function">Line <span class="title">line</span><span class="params">(myp1, myp2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Line <span class="title">line2</span><span class="params">(<span class="built_in">line</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"The length of the line is:"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">line</span>.getLen()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"The length or the line2 is:"</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;line2.getLen()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://wx2.sbimg.cn/2020/08/06/ooXYR.png" alt="ooXYR.png"></p><p><strong>me</strong>:<em>形实结合两次Point的构造函数，然后初始化Line的Point数据成员又两次point的构造函数，然后调用Line的构造函数（此时内嵌Point的构造函数已经调用）。接下来的三个复制构造函数就好理解了，不做赘述。</em></p><p><img src="https://wx1.sbimg.cn/2020/08/06/oomVI.png" alt="oomVI.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类的组合&quot;&gt;&lt;a href=&quot;#类的组合&quot; class=&quot;headerlink&quot; title=&quot;类的组合&quot;&gt;&lt;/a&gt;类的组合&lt;/h1&gt;&lt;p&gt;$ &lt;strong&gt;类的组合描述的就是一个类内嵌其它类的对象作为成员的情况，它们之间是一种包含与被包含的关系。&lt;/stron
      
    
    </summary>
    
    
      <category term="C++" scheme="https://dopphu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://dopphu.github.io/tags/C/"/>
    
      <category term="C++对象" scheme="https://dopphu.github.io/tags/C-%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Cplusplus析构函数</title>
    <link href="https://dopphu.github.io/2020/08/06/Cplusplus%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
    <id>https://dopphu.github.io/2020/08/06/Cplusplus%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/</id>
    <published>2020-08-06T09:19:58.000Z</published>
    <updated>2020-08-06T09:20:22.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h1><p><strong>$</strong> 析构函数与构造函数的作用几乎正好相反，它是用来完成对象被删除前的一些清理工作。<strong>析构函数是在对象的生存周期即将结束的时刻被自动调用的。</strong>它的调用完成之后对象也就消失了，相应的内存空间也会被释放。</p><p><img src="https://wx1.sbimg.cn/2020/08/05/oCOg6.png" alt="oCOg6.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Clock();<span class="comment">//构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setTime</span><span class="params">(<span class="keyword">int</span> newH, <span class="keyword">int</span> newM, <span class="keyword">int</span> newS)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showTime</span><span class="params">()</span></span>;</span><br><span class="line">~Clock&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> hour, minute, second; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;析构函数&quot;&gt;&lt;a href=&quot;#析构函数&quot; class=&quot;headerlink&quot; title=&quot;析构函数&quot;&gt;&lt;/a&gt;析构函数&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;$&lt;/strong&gt; 析构函数与构造函数的作用几乎正好相反，它是用来完成对象被删除前的一些清理工作。&lt;str
      
    
    </summary>
    
    
      <category term="C++" scheme="https://dopphu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://dopphu.github.io/tags/C/"/>
    
      <category term="C++对象" scheme="https://dopphu.github.io/tags/C-%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Cplusplus位域</title>
    <link href="https://dopphu.github.io/2020/08/06/Cplusplus%E4%BD%8D%E5%9F%9F/"/>
    <id>https://dopphu.github.io/2020/08/06/Cplusplus%E4%BD%8D%E5%9F%9F/</id>
    <published>2020-08-06T09:19:13.000Z</published>
    <updated>2020-08-06T09:19:40.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="位域"><a href="#位域" class="headerlink" title="位域"></a>位域</h1><p><img src="https://wx1.sbimg.cn/2020/08/06/o6NMl.png" alt="o6NMl.png"></p><p>课本截图，感jio说的很详细了。</p><p><strong>$</strong> 用个例子感受一下。</p><p>例子：设计一个结构体存储学生的成绩信息，需要包栝学号，年级和成绩3项内容，学号的范围是0-99 999 999，年级分为：freshman，sophomore，junior，senior四种，成绩包栝A，B，C，D四个等级。</p><p>分析：</p><ol><li><p>不使用位域：</p><p>学号用整型4个字节，分别用枚举储存年级和等级（各至少占一个字节）。则共计：6字节</p></li><li><p>使用位域：</p><p>学号要27个二进制位（2<sup>27</sup> = 134 217 728)的有效信息，而年级、成绩各需要两位二进制数就可以了。则共计：4个字节（即可存下）</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Level &#123;</span><br><span class="line">PRESHMAN, SOPHOMORE, JUNOR, SENIOR</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">enum</span> Grade &#123;</span><br><span class="line">A, B, C, D</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student(<span class="keyword">unsigned</span> <span class="keyword">int</span> number, Level level, Grade grade)</span><br><span class="line">:number(number), level(level), grade(grade) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">unsigned</span> number: <span class="number">27</span>;</span><br><span class="line">Level level : <span class="number">2</span>;</span><br><span class="line">Grade grade : <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::show</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Number:"</span>&lt;&lt;number&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Level:    "</span>;</span><br><span class="line"><span class="keyword">switch</span>(level)&#123;</span><br><span class="line"><span class="keyword">case</span> PRESHMAN:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"freshman"</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SOPHOMORE:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"sophomore"</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> JUNOR:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"junior"</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> SENIOR:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"senior"</span>;<span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Grade:    "</span>;</span><br><span class="line"><span class="keyword">switch</span>(grade)&#123;</span><br><span class="line"><span class="keyword">case</span> A:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"A"</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> B:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"B"</span>;<span class="keyword">break</span>; </span><br><span class="line"><span class="keyword">case</span> C:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"C"</span>;<span class="keyword">break</span>; </span><br><span class="line"><span class="keyword">case</span> D:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"D"</span>;<span class="keyword">break</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">Student <span class="title">s</span><span class="params">(<span class="number">123564</span>, SOPHOMORE, C)</span></span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Size of Student:"</span>&lt;&lt;<span class="keyword">sizeof</span>(Student)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">s.show();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://wx2.sbimg.cn/2020/08/06/o6FCd.png" alt="o6FCd.png"></p><p>不同编译器第一行的结果可能不同。</p><p><strong>$</strong> 再放一张课本截图吧。</p><p><img src="https://wx1.sbimg.cn/2020/08/06/o6ylU.png" alt="o6ylU.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;位域&quot;&gt;&lt;a href=&quot;#位域&quot; class=&quot;headerlink&quot; title=&quot;位域&quot;&gt;&lt;/a&gt;位域&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://wx1.sbimg.cn/2020/08/06/o6NMl.png&quot; alt=&quot;o6NMl.png&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="C++" scheme="https://dopphu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://dopphu.github.io/tags/C/"/>
    
      <category term="C++对象" scheme="https://dopphu.github.io/tags/C-%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Cplusplus前向声明</title>
    <link href="https://dopphu.github.io/2020/08/06/Cplusplus%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E/"/>
    <id>https://dopphu.github.io/2020/08/06/Cplusplus%E5%89%8D%E5%90%91%E5%A3%B0%E6%98%8E/</id>
    <published>2020-08-06T09:17:43.000Z</published>
    <updated>2020-08-06T09:18:46.621Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前向引用声明"><a href="#前向引用声明" class="headerlink" title="前向引用声明"></a>前向引用声明</h1><p><strong>$</strong> 我们知道，C++的类应当先定义再使用。但是处理复杂问题，考虑类的组合时，很可能遇到两个类相互引用的情况，这种情况也成称为循环依赖。例如</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(B b)</span></span>;<span class="comment">//以B类对象b作为形参的成员函数</span></span><br><span class="line">    <span class="comment">//这里将引起编译错误，因为“B”为未知符号</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">(A a)</span></span>;<span class="comment">//以A类对象为形参的成员函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于在使用一个类前，必须先定义该类，因此无论将哪一种类的定义放在前面，都会引起编译错误。加上如下的<strong>前向引用声明</strong>，问题就解决了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span><span class="comment">//前向引用声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(B b)</span></span>;<span class="comment">//以B类对象b作为形参的成员函数</span></span><br><span class="line">    <span class="comment">//这里将引起编译错误，因为“B”为未知符号</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>&#123;</span></span><br><span class="line">  <span class="keyword">public</span>:;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">g</span><span class="params">(A a)</span></span>;<span class="comment">//以A类对象为形参的成员函数</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>$</strong> 使用前向引用说明虽然可以解决一些问题，但它并不是万能的。需要注意的是，尽管使用了向前引用声明，<strong>但是在提供一个完整的类定义之前，不能定义该类的对象，也不能在内联成员函数中使用该类的对象。</strong>请看下面的程序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fred</span>;</span><span class="comment">//前向引用说明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Barney</span>&#123;</span></span><br><span class="line">    Fred x;<span class="comment">//错误：类Fred的定义尚不完善</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fred</span>&#123;</span></span><br><span class="line">  Barney y;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于这段程序，编译器将指出错误。原因是<strong>对类名Fred的前向引用只能说明Fred是个类名，而不能给出该类的完整定义，因此在类Barney中就不能定义类Fred的数据成员。</strong>因此使两个类以彼此的对象为数据成员，是不合法的。</p><p><strong>$</strong> 再看一幅图（直接截图课本）</p><p><img src="https://wx2.sbimg.cn/2020/08/06/ooIOU.png" alt="ooIOU.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前向引用声明&quot;&gt;&lt;a href=&quot;#前向引用声明&quot; class=&quot;headerlink&quot; title=&quot;前向引用声明&quot;&gt;&lt;/a&gt;前向引用声明&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;$&lt;/strong&gt; 我们知道，C++的类应当先定义再使用。但是处理复杂问题，考虑类的组合时
      
    
    </summary>
    
    
      <category term="C++" scheme="https://dopphu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://dopphu.github.io/tags/C/"/>
    
      <category term="C++对象" scheme="https://dopphu.github.io/tags/C-%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Cplusplus结构体和联合体</title>
    <link href="https://dopphu.github.io/2020/08/06/Cplusplus%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E8%81%94%E5%90%88%E4%BD%93/"/>
    <id>https://dopphu.github.io/2020/08/06/Cplusplus%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E8%81%94%E5%90%88%E4%BD%93/</id>
    <published>2020-08-06T09:14:13.000Z</published>
    <updated>2020-08-11T01:32:00.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-结构体和联合体"><a href="#C-结构体和联合体" class="headerlink" title="C++结构体和联合体"></a>C++结构体和联合体</h1><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p><img src="https://s1.ax1x.com/2020/08/06/acK6G8.png" alt="acK6G8.png"></p><p><img src="https://s1.ax1x.com/2020/08/06/acMksH.png" alt="acMksH.png"></p><p>这是关于结构体教材的截图（我觉得已经解决我大部分的疑惑了）。我对于结构体的想法是就当C语言的结构体使用就可以了，需要更复杂的数据结构就用C++的对象就好啦。</p><h2 id="联合体"><a href="#联合体" class="headerlink" title="联合体"></a>联合体</h2><p><strong>$</strong> 由于联合体的成员<strong>共用相同的内存单元</strong>，联合体变量中成员同时至多只有一个是有意义的。另外，不同数据单元共用相同内存单元的特性，联合体有下面一些限制。</p><ol><li>联合体的各个对象成员，不能有自定义的构造函数、自定义的析构函数和重载的赋值运算符，不仅联合体的对象成员不能有这些函数，这些对象的对象成员也不能有，以此类推。</li><li>联合体不能继承，因而也不支持包含多态。</li></ol><p><strong>$</strong> 联合体也可以不声明名称，称为无名联合体。无名联合体没有标记名，只是声明一个成员项的集合，这些成员具有相同的内存地址，可以由成员项的名字直接访问。</p><p>例如，声明无名联合体如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">float</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在程序中可以这样使用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">10</span>;</span><br><span class="line">f = <span class="number">2.2</span>;</span><br></pre></td></tr></table></figure><p><strong>$</strong> 无名联合体通常用作类或结构体的内嵌成员，下面一个例子辅助理解。</p><p>先插一个枚举类型变量的语法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">enum</span> &#123;</span><br><span class="line">GRADE, PASS, PERFECT</span><br><span class="line">&#125;mode;</span><br><span class="line">mode = GRADE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //mode = 1; 如果用这个语句的话会报错，我想mode就是一个只能被GRADE、PASS等赋值的变量 </span></span><br><span class="line"><span class="comment">    报错内容：</span></span><br><span class="line"><span class="comment">    [Error] invalid conversion from 'int' to 'main()::&lt;anonymous enum&gt;' [-fpermissive]</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">i = PASS;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"mode:"</span>&lt;&lt;mode&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"i:"</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正片开始</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExamInfo</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">ExamInfo(<span class="built_in">string</span> name, <span class="keyword">char</span> grade):name(name), mode(GRADE), grade(grade)&#123;&#125;</span><br><span class="line">ExamInfo(<span class="built_in">string</span> name, <span class="keyword">bool</span> pass):name(name), mode(PASS), pass(pass)&#123;&#125;</span><br><span class="line">ExamInfo(<span class="built_in">string</span> name, <span class="keyword">int</span> percent):name(name), mode(PERCENTAGE), percent(percent)&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> name;<span class="comment">//课程名称</span></span><br><span class="line"><span class="keyword">enum</span> &#123;</span><br><span class="line">GRADE, PASS, PERCENTAGE</span><br><span class="line">&#125;mode;<span class="comment">//采用何种计分方式</span></span><br><span class="line"><span class="keyword">union</span>&#123;</span><br><span class="line"><span class="keyword">char</span> grade;<span class="comment">//等级制</span></span><br><span class="line"><span class="keyword">bool</span> pass;<span class="comment">//是否通过 pass or fail</span></span><br><span class="line"><span class="keyword">int</span> percent;<span class="comment">//百分制的成绩</span></span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ExamInfo::show</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">":"</span>;</span><br><span class="line"><span class="keyword">switch</span>(mode)&#123;</span><br><span class="line"><span class="keyword">case</span> GRADE:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;grade;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PASS:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(pass?<span class="string">"PASS"</span>:<span class="string">"FAIL"</span>);<span class="comment">//这个括号()很关键，我在这栽了。可能是结合性的问题</span></span><br><span class="line">      <span class="comment">//cout&lt;&lt;pass?"PASS":"FAIL";这样写的话会直接打印出1.我试着把true改为false，结果变成了0。</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> PERCENTAGE:</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;percent;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">ExamInfo <span class="title">course1</span><span class="params">(<span class="string">"Math"</span>, <span class="string">'A'</span>)</span></span>;</span><br><span class="line"><span class="function">ExamInfo <span class="title">course2</span><span class="params">(<span class="string">"P.E"</span>, <span class="literal">true</span>)</span></span>;</span><br><span class="line"><span class="function">ExamInfo <span class="title">course3</span><span class="params">(<span class="string">"English"</span>, <span class="number">113</span>)</span></span>;</span><br><span class="line">    <span class="comment">//我忘了百分制（113&gt;100），但是不影响理解程序，不好意思。</span></span><br><span class="line"></span><br><span class="line">course1.show();</span><br><span class="line">course2.show();</span><br><span class="line">course3.show();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序执行结果：</p><p><img src="https://wx1.sbimg.cn/2020/08/11/oY9bJ.png" alt="oY9bJ.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C-结构体和联合体&quot;&gt;&lt;a href=&quot;#C-结构体和联合体&quot; class=&quot;headerlink&quot; title=&quot;C++结构体和联合体&quot;&gt;&lt;/a&gt;C++结构体和联合体&lt;/h1&gt;&lt;h2 id=&quot;结构体&quot;&gt;&lt;a href=&quot;#结构体&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="C++" scheme="https://dopphu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://dopphu.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>关于图床</title>
    <link href="https://dopphu.github.io/2020/08/06/%E5%85%B3%E4%BA%8E%E5%9B%BE%E5%BA%8A/"/>
    <id>https://dopphu.github.io/2020/08/06/%E5%85%B3%E4%BA%8E%E5%9B%BE%E5%BA%8A/</id>
    <published>2020-08-06T08:39:40.771Z</published>
    <updated>2020-08-06T08:45:11.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于图床"><a href="#关于图床" class="headerlink" title="关于图床"></a>关于图床</h1><p>免费的：（免费的弊端就是不稳定，生杀大权握在别人手中）</p><p>公益图床：<a href="https://sbimg.cn" target="_blank" rel="noopener">https://sbimg.cn</a> （这个url引用的速度个人感觉比路过图床快一些）</p><p>路过图床：<a href="https://imgchr.com/" target="_blank" rel="noopener">https://imgchr.com/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于图床&quot;&gt;&lt;a href=&quot;#关于图床&quot; class=&quot;headerlink&quot; title=&quot;关于图床&quot;&gt;&lt;/a&gt;关于图床&lt;/h1&gt;&lt;p&gt;免费的：（免费的弊端就是不稳定，生杀大权握在别人手中）&lt;/p&gt;
&lt;p&gt;公益图床：&lt;a href=&quot;https://sbimg
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>C++复制构造函数</title>
    <link href="https://dopphu.github.io/2020/08/05/Cplusplus%E5%A4%8D%E5%88%B6%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>https://dopphu.github.io/2020/08/05/Cplusplus%E5%A4%8D%E5%88%B6%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</id>
    <published>2020-08-05T01:14:09.000Z</published>
    <updated>2020-08-06T09:20:25.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数"></a>复制构造函数</h1><p>$ <strong>复制构造函数</strong>是一种特殊的构造函数，具有一般构造函数的所有特性，<strong>其形参是本类的对象的引用。其作用是使用一个已经存在的对象（由复制构造函数的参数指定），去初始化同类的一个新对象。</strong></p><p>$ <strong>隐含的复制构造函数</strong>：如果程序员没有定义类的复制构造函数，系统就会在必要时自动生成一个隐含的复制构造函数。<strong>这个隐含的构造函数会把初始值对象的每个数据成员的值都复制到新建立的对象中。</strong>（即完全拥有相同的属性。）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Point(<span class="keyword">int</span> xx=<span class="number">0</span>, <span class="keyword">int</span> yy=<span class="number">0</span>)&#123;</span><br><span class="line">x = xx;</span><br><span class="line">y = yy;</span><br><span class="line">&#125;</span><br><span class="line">Point(Point &amp;p);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getY</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line">Point::Point(Point &amp;p)&#123;</span><br><span class="line">x = p.x;</span><br><span class="line">y = p.y;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Calling the copy constructor"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(Point p)</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;p.getX()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">func2</span><span class="params">()</span></span>&#123;</span><br><span class="line">Point a;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function">Point <span class="title">a</span><span class="params">(<span class="number">4</span>,<span class="number">5</span>)</span></span>;</span><br><span class="line">Point b = a;<span class="comment">//情况一：用a初始化b。 </span></span><br><span class="line"><span class="function">Point <span class="title">c</span><span class="params">(b)</span></span>;<span class="comment">//同样是情况一，用一个对象初始化另一个对象时调用复制构造函数。 </span></span><br><span class="line"></span><br><span class="line">func1(a);<span class="comment">//情况二：函数的形参为类的对象，当调用函数时（形实结合）,复制构造函数被调用。 </span></span><br><span class="line"></span><br><span class="line">c = func2();<span class="comment">//情况三，当函数返回值是类的对象时，函数返回时，调用复制构造函数。 </span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;b.getX()&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://wx1.sbimg.cn/2020/08/04/PfH5k.png" alt="PfH5k.png"></p><p><strong>关于情况三</strong>：我用的Dev c++（忘了哪个版本了），运行结果显示并没有调用构造函数。书本是这么说的：</p><p><img src="https://wx1.sbimg.cn/2020/08/05/o0M82.png" alt="o0M82.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;复制构造函数&quot;&gt;&lt;a href=&quot;#复制构造函数&quot; class=&quot;headerlink&quot; title=&quot;复制构造函数&quot;&gt;&lt;/a&gt;复制构造函数&lt;/h1&gt;&lt;p&gt;$ &lt;strong&gt;复制构造函数&lt;/strong&gt;是一种特殊的构造函数，具有一般构造函数的所有特性，&lt;str
      
    
    </summary>
    
    
      <category term="C++" scheme="https://dopphu.github.io/categories/C/"/>
    
    
      <category term="C++" scheme="https://dopphu.github.io/tags/C/"/>
    
      <category term="C++对象" scheme="https://dopphu.github.io/tags/C-%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>web初始</title>
    <link href="https://dopphu.github.io/2020/08/02/web%E5%88%9D%E5%A7%8B/"/>
    <id>https://dopphu.github.io/2020/08/02/web%E5%88%9D%E5%A7%8B/</id>
    <published>2020-08-02T00:44:36.863Z</published>
    <updated>2020-06-10T07:17:36.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一天作业"><a href="#第一天作业" class="headerlink" title="第一天作业"></a>第一天作业</h1><h2 id="1-熟悉HTML文件结构，并练习基本标签的使用"><a href="#1-熟悉HTML文件结构，并练习基本标签的使用" class="headerlink" title="1.熟悉HTML文件结构，并练习基本标签的使用"></a>1.熟悉HTML文件结构，并练习基本标签的使用</h2><pre><code>&lt;!doctype html&gt;    &lt;html&gt;    &lt;head&gt;         &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf=8&quot; /&gt;        &lt;meta name=&quot;keyword&quot; content=&quot;...&quot; /&gt;        &lt;meta name=&quot;description&quot; content=&quot;...&quot; /&gt;        &lt;link rel=&quot;shortcut icon&quot; href=&quot;图片路径+文件名&quot; type=&quot;image/x-icon&quot; /&gt;        &lt;title&gt;...&lt;/title&gt;        &lt;link rel=&quot;stylesheet&quot; href=&quot;外部样式文件名&quot; /&gt;        &lt;style type=&quot;text/css&gt;        样式设置...        &lt;/style&gt;    &lt;/head&gt;    &lt;body&gt;        网页主题内容（略）    &lt;/body&gt;    &lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;        脚本代码...    &lt;/script&gt;&lt;/html&gt;</code></pre><h2 id="2-熟悉W3C规范，熟悉语义化标签，整理每个标签对应的语义环境"><a href="#2-熟悉W3C规范，熟悉语义化标签，整理每个标签对应的语义环境" class="headerlink" title="2.熟悉W3C规范，熟悉语义化标签，整理每个标签对应的语义环境"></a>2.熟悉W3C规范，熟悉语义化标签，整理每个标签对应的语义环境</h2><pre><code>w3c标准由结构（HTML），表现（CSS）和行为（JavaScript）三部分组成w3c常见规范有：    1）定义语言编码        &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/javascript;charset=utf-8&quot;    2）JavaScript定义        &lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;        脚本代码...        &lt;/script&gt;    3）CSS定义        &lt;style type=&quot;text/css&gt;            样式设置...        &lt;/style&gt;        为保证个浏览器的兼容性，在写CSS是请带上计量单位    4）不要在注释内容中使用&quot;--&quot;        &lt;!-- 注释内容 --&gt;(实在不行&quot;=&quot;也挺好看的)    5）所有标签和属性的名字都要用小写    6）所有的属性值必须用双引号引起来    7）如果文档中要输出&gt;,&lt;和&amp;等，请使用实体转义符        &lt;p&gt;&amp;gt;&amp;lt;&amp;amp;...&lt;/p&gt;    8）要给所有的属性赋一个值,否则将属性名视为值本身        &lt;img src=&quot;...&quot; alt=&quot;...&quot; /&gt;        &lt;input type=&quot;text&quot; readonly /&gt;//相当于readonly=&quot;readonly&quot;    9）所有的标签都必须要有一个相应的结束标记（标签必须要闭合）        &lt;p&gt;...&lt;/p&gt;        &lt;hr /&gt;    10）所有的标签必须合理嵌套，不能出现嵌套交叉的情况        &lt;div&gt;&lt;p&gt;...&lt;/div&gt;&lt;/p&gt;#出现交叉错误    11）图片要添加有意义的alt的属性    12）在form表单中增加lable标签，以增加用户体验效果</code></pre><h2 id="3-练习并测试HTML标签嵌套规则"><a href="#3-练习并测试HTML标签嵌套规则" class="headerlink" title="3.练习并测试HTML标签嵌套规则"></a>3.练习并测试HTML标签嵌套规则</h2><pre><code>略。</code></pre><h2 id="4-实现如图所示网页效果"><a href="#4-实现如图所示网页效果" class="headerlink" title="4.实现如图所示网页效果"></a>4.实现如图所示网页效果</h2><pre><code>略。</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一天作业&quot;&gt;&lt;a href=&quot;#第一天作业&quot; class=&quot;headerlink&quot; title=&quot;第一天作业&quot;&gt;&lt;/a&gt;第一天作业&lt;/h1&gt;&lt;h2 id=&quot;1-熟悉HTML文件结构，并练习基本标签的使用&quot;&gt;&lt;a href=&quot;#1-熟悉HTML文件结构，并练习基本
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>demo1</title>
    <link href="https://dopphu.github.io/2020/08/02/demo1/"/>
    <id>https://dopphu.github.io/2020/08/02/demo1/</id>
    <published>2020-08-02T00:44:36.613Z</published>
    <updated>2020-08-04T00:52:26.558Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ASCII码对照表</p></blockquote><p><img src="https://wx1.sbimg.cn/2020/08/04/PfoAl.png" alt="PfoAl.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;ASCII码对照表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://wx1.sbimg.cn/2020/08/04/PfoAl.png&quot; alt=&quot;PfoAl.png&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
</feed>
